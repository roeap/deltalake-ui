//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// <p>
// http://www.apache.org/licenses/LICENSE-2.0
// <p>
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file arrow/flight/protocol/sql/fligh_sql.proto (package arrow.flight.protocol.sql, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Options for CommandGetSqlInfo.
 *
 * @generated from enum arrow.flight.protocol.sql.SqlInfo
 */
export enum SqlInfo {
  /**
   * Retrieves a UTF-8 string with the name of the Flight SQL Server.
   *
   * @generated from enum value: FLIGHT_SQL_SERVER_NAME = 0;
   */
  FLIGHT_SQL_SERVER_NAME = 0,

  /**
   * Retrieves a UTF-8 string with the native version of the Flight SQL Server.
   *
   * @generated from enum value: FLIGHT_SQL_SERVER_VERSION = 1;
   */
  FLIGHT_SQL_SERVER_VERSION = 1,

  /**
   * Retrieves a UTF-8 string with the Arrow format version of the Flight SQL Server.
   *
   * @generated from enum value: FLIGHT_SQL_SERVER_ARROW_VERSION = 2;
   */
  FLIGHT_SQL_SERVER_ARROW_VERSION = 2,

  /**
   *
   * Retrieves a boolean value indicating whether the Flight SQL Server is read only.
   *
   * Returns:
   * - false: if read-write
   * - true: if read only
   *
   * @generated from enum value: FLIGHT_SQL_SERVER_READ_ONLY = 3;
   */
  FLIGHT_SQL_SERVER_READ_ONLY = 3,

  /**
   *
   * Retrieves a boolean value indicating whether the Flight SQL Server supports executing
   * SQL queries.
   *
   * Note that the absence of this info (as opposed to a false value) does not necessarily
   * mean that SQL is not supported, as this property was not originally defined.
   *
   * @generated from enum value: FLIGHT_SQL_SERVER_SQL = 4;
   */
  FLIGHT_SQL_SERVER_SQL = 4,

  /**
   *
   * Retrieves a boolean value indicating whether the Flight SQL Server supports executing
   * Substrait plans.
   *
   * @generated from enum value: FLIGHT_SQL_SERVER_SUBSTRAIT = 5;
   */
  FLIGHT_SQL_SERVER_SUBSTRAIT = 5,

  /**
   *
   * Retrieves a string value indicating the minimum supported Substrait version, or null
   * if Substrait is not supported.
   *
   * @generated from enum value: FLIGHT_SQL_SERVER_SUBSTRAIT_MIN_VERSION = 6;
   */
  FLIGHT_SQL_SERVER_SUBSTRAIT_MIN_VERSION = 6,

  /**
   *
   * Retrieves a string value indicating the maximum supported Substrait version, or null
   * if Substrait is not supported.
   *
   * @generated from enum value: FLIGHT_SQL_SERVER_SUBSTRAIT_MAX_VERSION = 7;
   */
  FLIGHT_SQL_SERVER_SUBSTRAIT_MAX_VERSION = 7,

  /**
   *
   * Retrieves an int32 indicating whether the Flight SQL Server supports the
   * BeginTransaction/EndTransaction/BeginSavepoint/EndSavepoint actions.
   *
   * Even if this is not supported, the database may still support explicit "BEGIN
   * TRANSACTION"/"COMMIT" SQL statements (see SQL_TRANSACTIONS_SUPPORTED); this property
   * is only about whether the server implements the Flight SQL API endpoints.
   *
   * The possible values are listed in `SqlSupportedTransaction`.
   *
   * @generated from enum value: FLIGHT_SQL_SERVER_TRANSACTION = 8;
   */
  FLIGHT_SQL_SERVER_TRANSACTION = 8,

  /**
   *
   * Retrieves a boolean value indicating whether the Flight SQL Server supports explicit
   * query cancellation (the CancelQuery action).
   *
   * @generated from enum value: FLIGHT_SQL_SERVER_CANCEL = 9;
   */
  FLIGHT_SQL_SERVER_CANCEL = 9,

  /**
   *
   * Retrieves an int32 indicating the timeout (in milliseconds) for prepared statement handles.
   *
   * If 0, there is no timeout.  Servers should reset the timeout when the handle is used in a command.
   *
   * @generated from enum value: FLIGHT_SQL_SERVER_STATEMENT_TIMEOUT = 100;
   */
  FLIGHT_SQL_SERVER_STATEMENT_TIMEOUT = 100,

  /**
   *
   * Retrieves an int32 indicating the timeout (in milliseconds) for transactions, since transactions are not tied to a connection.
   *
   * If 0, there is no timeout.  Servers should reset the timeout when the handle is used in a command.
   *
   * @generated from enum value: FLIGHT_SQL_SERVER_TRANSACTION_TIMEOUT = 101;
   */
  FLIGHT_SQL_SERVER_TRANSACTION_TIMEOUT = 101,

  /**
   *
   * Retrieves a boolean value indicating whether the Flight SQL Server supports CREATE and DROP of catalogs.
   *
   * Returns:
   * - false: if it doesn't support CREATE and DROP of catalogs.
   * - true: if it supports CREATE and DROP of catalogs.
   *
   * @generated from enum value: SQL_DDL_CATALOG = 500;
   */
  SQL_DDL_CATALOG = 500,

  /**
   *
   * Retrieves a boolean value indicating whether the Flight SQL Server supports CREATE and DROP of schemas.
   *
   * Returns:
   * - false: if it doesn't support CREATE and DROP of schemas.
   * - true: if it supports CREATE and DROP of schemas.
   *
   * @generated from enum value: SQL_DDL_SCHEMA = 501;
   */
  SQL_DDL_SCHEMA = 501,

  /**
   *
   * Indicates whether the Flight SQL Server supports CREATE and DROP of tables.
   *
   * Returns:
   * - false: if it doesn't support CREATE and DROP of tables.
   * - true: if it supports CREATE and DROP of tables.
   *
   * @generated from enum value: SQL_DDL_TABLE = 502;
   */
  SQL_DDL_TABLE = 502,

  /**
   *
   * Retrieves a int32 ordinal representing the case sensitivity of catalog, table, schema and table names.
   *
   * The possible values are listed in `arrow.flight.protocol.sql.SqlSupportedCaseSensitivity`.
   *
   * @generated from enum value: SQL_IDENTIFIER_CASE = 503;
   */
  SQL_IDENTIFIER_CASE = 503,

  /**
   * Retrieves a UTF-8 string with the supported character(s) used to surround a delimited identifier.
   *
   * @generated from enum value: SQL_IDENTIFIER_QUOTE_CHAR = 504;
   */
  SQL_IDENTIFIER_QUOTE_CHAR = 504,

  /**
   *
   * Retrieves a int32 describing the case sensitivity of quoted identifiers.
   *
   * The possible values are listed in `arrow.flight.protocol.sql.SqlSupportedCaseSensitivity`.
   *
   * @generated from enum value: SQL_QUOTED_IDENTIFIER_CASE = 505;
   */
  SQL_QUOTED_IDENTIFIER_CASE = 505,

  /**
   *
   * Retrieves a boolean value indicating whether all tables are selectable.
   *
   * Returns:
   * - false: if not all tables are selectable or if none are;
   * - true: if all tables are selectable.
   *
   * @generated from enum value: SQL_ALL_TABLES_ARE_SELECTABLE = 506;
   */
  SQL_ALL_TABLES_ARE_SELECTABLE = 506,

  /**
   *
   * Retrieves the null ordering.
   *
   * Returns a int32 ordinal for the null ordering being used, as described in
   * `arrow.flight.protocol.sql.SqlNullOrdering`.
   *
   * @generated from enum value: SQL_NULL_ORDERING = 507;
   */
  SQL_NULL_ORDERING = 507,

  /**
   * Retrieves a UTF-8 string list with values of the supported keywords.
   *
   * @generated from enum value: SQL_KEYWORDS = 508;
   */
  SQL_KEYWORDS = 508,

  /**
   * Retrieves a UTF-8 string list with values of the supported numeric functions.
   *
   * @generated from enum value: SQL_NUMERIC_FUNCTIONS = 509;
   */
  SQL_NUMERIC_FUNCTIONS = 509,

  /**
   * Retrieves a UTF-8 string list with values of the supported string functions.
   *
   * @generated from enum value: SQL_STRING_FUNCTIONS = 510;
   */
  SQL_STRING_FUNCTIONS = 510,

  /**
   * Retrieves a UTF-8 string list with values of the supported system functions.
   *
   * @generated from enum value: SQL_SYSTEM_FUNCTIONS = 511;
   */
  SQL_SYSTEM_FUNCTIONS = 511,

  /**
   * Retrieves a UTF-8 string list with values of the supported datetime functions.
   *
   * @generated from enum value: SQL_DATETIME_FUNCTIONS = 512;
   */
  SQL_DATETIME_FUNCTIONS = 512,

  /**
   *
   * Retrieves the UTF-8 string that can be used to escape wildcard characters.
   * This is the string that can be used to escape '_' or '%' in the catalog search parameters that are a pattern
   * (and therefore use one of the wildcard characters).
   * The '_' character represents any single character; the '%' character represents any sequence of zero or more
   * characters.
   *
   * @generated from enum value: SQL_SEARCH_STRING_ESCAPE = 513;
   */
  SQL_SEARCH_STRING_ESCAPE = 513,

  /**
   *
   * Retrieves a UTF-8 string with all the "extra" characters that can be used in unquoted identifier names
   * (those beyond a-z, A-Z, 0-9 and _).
   *
   * @generated from enum value: SQL_EXTRA_NAME_CHARACTERS = 514;
   */
  SQL_EXTRA_NAME_CHARACTERS = 514,

  /**
   *
   * Retrieves a boolean value indicating whether column aliasing is supported.
   * If so, the SQL AS clause can be used to provide names for computed columns or to provide alias names for columns
   * as required.
   *
   * Returns:
   * - false: if column aliasing is unsupported;
   * - true: if column aliasing is supported.
   *
   * @generated from enum value: SQL_SUPPORTS_COLUMN_ALIASING = 515;
   */
  SQL_SUPPORTS_COLUMN_ALIASING = 515,

  /**
   *
   * Retrieves a boolean value indicating whether concatenations between null and non-null values being
   * null are supported.
   *
   * - Returns:
   * - false: if concatenations between null and non-null values being null are unsupported;
   * - true: if concatenations between null and non-null values being null are supported.
   *
   * @generated from enum value: SQL_NULL_PLUS_NULL_IS_NULL = 516;
   */
  SQL_NULL_PLUS_NULL_IS_NULL = 516,

  /**
   *
   * Retrieves a map where the key is the type to convert from and the value is a list with the types to convert to,
   * indicating the supported conversions. Each key and each item on the list value is a value to a predefined type on
   * SqlSupportsConvert enum.
   * The returned map will be:  map<int32, list<int32>>
   *
   * @generated from enum value: SQL_SUPPORTS_CONVERT = 517;
   */
  SQL_SUPPORTS_CONVERT = 517,

  /**
   *
   * Retrieves a boolean value indicating whether, when table correlation names are supported,
   * they are restricted to being different from the names of the tables.
   *
   * Returns:
   * - false: if table correlation names are unsupported;
   * - true: if table correlation names are supported.
   *
   * @generated from enum value: SQL_SUPPORTS_TABLE_CORRELATION_NAMES = 518;
   */
  SQL_SUPPORTS_TABLE_CORRELATION_NAMES = 518,

  /**
   *
   * Retrieves a boolean value indicating whether, when table correlation names are supported,
   * they are restricted to being different from the names of the tables.
   *
   * Returns:
   * - false: if different table correlation names are unsupported;
   * - true: if different table correlation names are supported
   *
   * @generated from enum value: SQL_SUPPORTS_DIFFERENT_TABLE_CORRELATION_NAMES = 519;
   */
  SQL_SUPPORTS_DIFFERENT_TABLE_CORRELATION_NAMES = 519,

  /**
   *
   * Retrieves a boolean value indicating whether expressions in ORDER BY lists are supported.
   *
   * Returns:
   * - false: if expressions in ORDER BY are unsupported;
   * - true: if expressions in ORDER BY are supported;
   *
   * @generated from enum value: SQL_SUPPORTS_EXPRESSIONS_IN_ORDER_BY = 520;
   */
  SQL_SUPPORTS_EXPRESSIONS_IN_ORDER_BY = 520,

  /**
   *
   * Retrieves a boolean value indicating whether using a column that is not in the SELECT statement in a GROUP BY
   * clause is supported.
   *
   * Returns:
   * - false: if using a column that is not in the SELECT statement in a GROUP BY clause is unsupported;
   * - true: if using a column that is not in the SELECT statement in a GROUP BY clause is supported.
   *
   * @generated from enum value: SQL_SUPPORTS_ORDER_BY_UNRELATED = 521;
   */
  SQL_SUPPORTS_ORDER_BY_UNRELATED = 521,

  /**
   *
   * Retrieves the supported GROUP BY commands;
   *
   * Returns an int32 bitmask value representing the supported commands.
   * The returned bitmask should be parsed in order to retrieve the supported commands.
   *
   * For instance:
   * - return 0 (\b0)   => [] (GROUP BY is unsupported);
   * - return 1 (\b1)   => [SQL_GROUP_BY_UNRELATED];
   * - return 2 (\b10)  => [SQL_GROUP_BY_BEYOND_SELECT];
   * - return 3 (\b11)  => [SQL_GROUP_BY_UNRELATED, SQL_GROUP_BY_BEYOND_SELECT].
   * Valid GROUP BY types are described under `arrow.flight.protocol.sql.SqlSupportedGroupBy`.
   *
   * @generated from enum value: SQL_SUPPORTED_GROUP_BY = 522;
   */
  SQL_SUPPORTED_GROUP_BY = 522,

  /**
   *
   * Retrieves a boolean value indicating whether specifying a LIKE escape clause is supported.
   *
   * Returns:
   * - false: if specifying a LIKE escape clause is unsupported;
   * - true: if specifying a LIKE escape clause is supported.
   *
   * @generated from enum value: SQL_SUPPORTS_LIKE_ESCAPE_CLAUSE = 523;
   */
  SQL_SUPPORTS_LIKE_ESCAPE_CLAUSE = 523,

  /**
   *
   * Retrieves a boolean value indicating whether columns may be defined as non-nullable.
   *
   * Returns:
   * - false: if columns cannot be defined as non-nullable;
   * - true: if columns may be defined as non-nullable.
   *
   * @generated from enum value: SQL_SUPPORTS_NON_NULLABLE_COLUMNS = 524;
   */
  SQL_SUPPORTS_NON_NULLABLE_COLUMNS = 524,

  /**
   *
   * Retrieves the supported SQL grammar level as per the ODBC specification.
   *
   * Returns an int32 bitmask value representing the supported SQL grammar level.
   * The returned bitmask should be parsed in order to retrieve the supported grammar levels.
   *
   * For instance:
   * - return 0 (\b0)   => [] (SQL grammar is unsupported);
   * - return 1 (\b1)   => [SQL_MINIMUM_GRAMMAR];
   * - return 2 (\b10)  => [SQL_CORE_GRAMMAR];
   * - return 3 (\b11)  => [SQL_MINIMUM_GRAMMAR, SQL_CORE_GRAMMAR];
   * - return 4 (\b100) => [SQL_EXTENDED_GRAMMAR];
   * - return 5 (\b101) => [SQL_MINIMUM_GRAMMAR, SQL_EXTENDED_GRAMMAR];
   * - return 6 (\b110) => [SQL_CORE_GRAMMAR, SQL_EXTENDED_GRAMMAR];
   * - return 7 (\b111) => [SQL_MINIMUM_GRAMMAR, SQL_CORE_GRAMMAR, SQL_EXTENDED_GRAMMAR].
   * Valid SQL grammar levels are described under `arrow.flight.protocol.sql.SupportedSqlGrammar`.
   *
   * @generated from enum value: SQL_SUPPORTED_GRAMMAR = 525;
   */
  SQL_SUPPORTED_GRAMMAR = 525,

  /**
   *
   * Retrieves the supported ANSI92 SQL grammar level.
   *
   * Returns an int32 bitmask value representing the supported ANSI92 SQL grammar level.
   * The returned bitmask should be parsed in order to retrieve the supported commands.
   *
   * For instance:
   * - return 0 (\b0)   => [] (ANSI92 SQL grammar is unsupported);
   * - return 1 (\b1)   => [ANSI92_ENTRY_SQL];
   * - return 2 (\b10)  => [ANSI92_INTERMEDIATE_SQL];
   * - return 3 (\b11)  => [ANSI92_ENTRY_SQL, ANSI92_INTERMEDIATE_SQL];
   * - return 4 (\b100) => [ANSI92_FULL_SQL];
   * - return 5 (\b101) => [ANSI92_ENTRY_SQL, ANSI92_FULL_SQL];
   * - return 6 (\b110) => [ANSI92_INTERMEDIATE_SQL, ANSI92_FULL_SQL];
   * - return 7 (\b111) => [ANSI92_ENTRY_SQL, ANSI92_INTERMEDIATE_SQL, ANSI92_FULL_SQL].
   * Valid ANSI92 SQL grammar levels are described under `arrow.flight.protocol.sql.SupportedAnsi92SqlGrammarLevel`.
   *
   * @generated from enum value: SQL_ANSI92_SUPPORTED_LEVEL = 526;
   */
  SQL_ANSI92_SUPPORTED_LEVEL = 526,

  /**
   *
   * Retrieves a boolean value indicating whether the SQL Integrity Enhancement Facility is supported.
   *
   * Returns:
   * - false: if the SQL Integrity Enhancement Facility is supported;
   * - true: if the SQL Integrity Enhancement Facility is supported.
   *
   * @generated from enum value: SQL_SUPPORTS_INTEGRITY_ENHANCEMENT_FACILITY = 527;
   */
  SQL_SUPPORTS_INTEGRITY_ENHANCEMENT_FACILITY = 527,

  /**
   *
   * Retrieves the support level for SQL OUTER JOINs.
   *
   * Returns a int32 ordinal for the SQL ordering being used, as described in
   * `arrow.flight.protocol.sql.SqlOuterJoinsSupportLevel`.
   *
   * @generated from enum value: SQL_OUTER_JOINS_SUPPORT_LEVEL = 528;
   */
  SQL_OUTER_JOINS_SUPPORT_LEVEL = 528,

  /**
   * Retrieves a UTF-8 string with the preferred term for "schema".
   *
   * @generated from enum value: SQL_SCHEMA_TERM = 529;
   */
  SQL_SCHEMA_TERM = 529,

  /**
   * Retrieves a UTF-8 string with the preferred term for "procedure".
   *
   * @generated from enum value: SQL_PROCEDURE_TERM = 530;
   */
  SQL_PROCEDURE_TERM = 530,

  /**
   *
   * Retrieves a UTF-8 string with the preferred term for "catalog".
   * If a empty string is returned its assumed that the server does NOT supports catalogs.
   *
   * @generated from enum value: SQL_CATALOG_TERM = 531;
   */
  SQL_CATALOG_TERM = 531,

  /**
   *
   * Retrieves a boolean value indicating whether a catalog appears at the start of a fully qualified table name.
   *
   * - false: if a catalog does not appear at the start of a fully qualified table name;
   * - true: if a catalog appears at the start of a fully qualified table name.
   *
   * @generated from enum value: SQL_CATALOG_AT_START = 532;
   */
  SQL_CATALOG_AT_START = 532,

  /**
   *
   * Retrieves the supported actions for a SQL schema.
   *
   * Returns an int32 bitmask value representing the supported actions for a SQL schema.
   * The returned bitmask should be parsed in order to retrieve the supported actions for a SQL schema.
   *
   * For instance:
   * - return 0 (\b0)   => [] (no supported actions for SQL schema);
   * - return 1 (\b1)   => [SQL_ELEMENT_IN_PROCEDURE_CALLS];
   * - return 2 (\b10)  => [SQL_ELEMENT_IN_INDEX_DEFINITIONS];
   * - return 3 (\b11)  => [SQL_ELEMENT_IN_PROCEDURE_CALLS, SQL_ELEMENT_IN_INDEX_DEFINITIONS];
   * - return 4 (\b100) => [SQL_ELEMENT_IN_PRIVILEGE_DEFINITIONS];
   * - return 5 (\b101) => [SQL_ELEMENT_IN_PROCEDURE_CALLS, SQL_ELEMENT_IN_PRIVILEGE_DEFINITIONS];
   * - return 6 (\b110) => [SQL_ELEMENT_IN_INDEX_DEFINITIONS, SQL_ELEMENT_IN_PRIVILEGE_DEFINITIONS];
   * - return 7 (\b111) => [SQL_ELEMENT_IN_PROCEDURE_CALLS, SQL_ELEMENT_IN_INDEX_DEFINITIONS, SQL_ELEMENT_IN_PRIVILEGE_DEFINITIONS].
   * Valid actions for a SQL schema described under `arrow.flight.protocol.sql.SqlSupportedElementActions`.
   *
   * @generated from enum value: SQL_SCHEMAS_SUPPORTED_ACTIONS = 533;
   */
  SQL_SCHEMAS_SUPPORTED_ACTIONS = 533,

  /**
   *
   * Retrieves the supported actions for a SQL schema.
   *
   * Returns an int32 bitmask value representing the supported actions for a SQL catalog.
   * The returned bitmask should be parsed in order to retrieve the supported actions for a SQL catalog.
   *
   * For instance:
   * - return 0 (\b0)   => [] (no supported actions for SQL catalog);
   * - return 1 (\b1)   => [SQL_ELEMENT_IN_PROCEDURE_CALLS];
   * - return 2 (\b10)  => [SQL_ELEMENT_IN_INDEX_DEFINITIONS];
   * - return 3 (\b11)  => [SQL_ELEMENT_IN_PROCEDURE_CALLS, SQL_ELEMENT_IN_INDEX_DEFINITIONS];
   * - return 4 (\b100) => [SQL_ELEMENT_IN_PRIVILEGE_DEFINITIONS];
   * - return 5 (\b101) => [SQL_ELEMENT_IN_PROCEDURE_CALLS, SQL_ELEMENT_IN_PRIVILEGE_DEFINITIONS];
   * - return 6 (\b110) => [SQL_ELEMENT_IN_INDEX_DEFINITIONS, SQL_ELEMENT_IN_PRIVILEGE_DEFINITIONS];
   * - return 7 (\b111) => [SQL_ELEMENT_IN_PROCEDURE_CALLS, SQL_ELEMENT_IN_INDEX_DEFINITIONS, SQL_ELEMENT_IN_PRIVILEGE_DEFINITIONS].
   * Valid actions for a SQL catalog are described under `arrow.flight.protocol.sql.SqlSupportedElementActions`.
   *
   * @generated from enum value: SQL_CATALOGS_SUPPORTED_ACTIONS = 534;
   */
  SQL_CATALOGS_SUPPORTED_ACTIONS = 534,

  /**
   *
   * Retrieves the supported SQL positioned commands.
   *
   * Returns an int32 bitmask value representing the supported SQL positioned commands.
   * The returned bitmask should be parsed in order to retrieve the supported SQL positioned commands.
   *
   * For instance:
   * - return 0 (\b0)   => [] (no supported SQL positioned commands);
   * - return 1 (\b1)   => [SQL_POSITIONED_DELETE];
   * - return 2 (\b10)  => [SQL_POSITIONED_UPDATE];
   * - return 3 (\b11)  => [SQL_POSITIONED_DELETE, SQL_POSITIONED_UPDATE].
   * Valid SQL positioned commands are described under `arrow.flight.protocol.sql.SqlSupportedPositionedCommands`.
   *
   * @generated from enum value: SQL_SUPPORTED_POSITIONED_COMMANDS = 535;
   */
  SQL_SUPPORTED_POSITIONED_COMMANDS = 535,

  /**
   *
   * Retrieves a boolean value indicating whether SELECT FOR UPDATE statements are supported.
   *
   * Returns:
   * - false: if SELECT FOR UPDATE statements are unsupported;
   * - true: if SELECT FOR UPDATE statements are supported.
   *
   * @generated from enum value: SQL_SELECT_FOR_UPDATE_SUPPORTED = 536;
   */
  SQL_SELECT_FOR_UPDATE_SUPPORTED = 536,

  /**
   *
   * Retrieves a boolean value indicating whether stored procedure calls that use the stored procedure escape syntax
   * are supported.
   *
   * Returns:
   * - false: if stored procedure calls that use the stored procedure escape syntax are unsupported;
   * - true: if stored procedure calls that use the stored procedure escape syntax are supported.
   *
   * @generated from enum value: SQL_STORED_PROCEDURES_SUPPORTED = 537;
   */
  SQL_STORED_PROCEDURES_SUPPORTED = 537,

  /**
   *
   * Retrieves the supported SQL subqueries.
   *
   * Returns an int32 bitmask value representing the supported SQL subqueries.
   * The returned bitmask should be parsed in order to retrieve the supported SQL subqueries.
   *
   * For instance:
   * - return 0   (\b0)     => [] (no supported SQL subqueries);
   * - return 1   (\b1)     => [SQL_SUBQUERIES_IN_COMPARISONS];
   * - return 2   (\b10)    => [SQL_SUBQUERIES_IN_EXISTS];
   * - return 3   (\b11)    => [SQL_SUBQUERIES_IN_COMPARISONS, SQL_SUBQUERIES_IN_EXISTS];
   * - return 4   (\b100)   => [SQL_SUBQUERIES_IN_INS];
   * - return 5   (\b101)   => [SQL_SUBQUERIES_IN_COMPARISONS, SQL_SUBQUERIES_IN_INS];
   * - return 6   (\b110)   => [SQL_SUBQUERIES_IN_INS, SQL_SUBQUERIES_IN_EXISTS];
   * - return 7   (\b111)   => [SQL_SUBQUERIES_IN_COMPARISONS, SQL_SUBQUERIES_IN_EXISTS, SQL_SUBQUERIES_IN_INS];
   * - return 8   (\b1000)  => [SQL_SUBQUERIES_IN_QUANTIFIEDS];
   * - return 9   (\b1001)  => [SQL_SUBQUERIES_IN_COMPARISONS, SQL_SUBQUERIES_IN_QUANTIFIEDS];
   * - return 10  (\b1010)  => [SQL_SUBQUERIES_IN_EXISTS, SQL_SUBQUERIES_IN_QUANTIFIEDS];
   * - return 11  (\b1011)  => [SQL_SUBQUERIES_IN_COMPARISONS, SQL_SUBQUERIES_IN_EXISTS, SQL_SUBQUERIES_IN_QUANTIFIEDS];
   * - return 12  (\b1100)  => [SQL_SUBQUERIES_IN_INS, SQL_SUBQUERIES_IN_QUANTIFIEDS];
   * - return 13  (\b1101)  => [SQL_SUBQUERIES_IN_COMPARISONS, SQL_SUBQUERIES_IN_INS, SQL_SUBQUERIES_IN_QUANTIFIEDS];
   * - return 14  (\b1110)  => [SQL_SUBQUERIES_IN_EXISTS, SQL_SUBQUERIES_IN_INS, SQL_SUBQUERIES_IN_QUANTIFIEDS];
   * - return 15  (\b1111)  => [SQL_SUBQUERIES_IN_COMPARISONS, SQL_SUBQUERIES_IN_EXISTS, SQL_SUBQUERIES_IN_INS, SQL_SUBQUERIES_IN_QUANTIFIEDS];
   * - ...
   * Valid SQL subqueries are described under `arrow.flight.protocol.sql.SqlSupportedSubqueries`.
   *
   * @generated from enum value: SQL_SUPPORTED_SUBQUERIES = 538;
   */
  SQL_SUPPORTED_SUBQUERIES = 538,

  /**
   *
   * Retrieves a boolean value indicating whether correlated subqueries are supported.
   *
   * Returns:
   * - false: if correlated subqueries are unsupported;
   * - true: if correlated subqueries are supported.
   *
   * @generated from enum value: SQL_CORRELATED_SUBQUERIES_SUPPORTED = 539;
   */
  SQL_CORRELATED_SUBQUERIES_SUPPORTED = 539,

  /**
   *
   * Retrieves the supported SQL UNIONs.
   *
   * Returns an int32 bitmask value representing the supported SQL UNIONs.
   * The returned bitmask should be parsed in order to retrieve the supported SQL UNIONs.
   *
   * For instance:
   * - return 0 (\b0)   => [] (no supported SQL positioned commands);
   * - return 1 (\b1)   => [SQL_UNION];
   * - return 2 (\b10)  => [SQL_UNION_ALL];
   * - return 3 (\b11)  => [SQL_UNION, SQL_UNION_ALL].
   * Valid SQL positioned commands are described under `arrow.flight.protocol.sql.SqlSupportedUnions`.
   *
   * @generated from enum value: SQL_SUPPORTED_UNIONS = 540;
   */
  SQL_SUPPORTED_UNIONS = 540,

  /**
   * Retrieves a int64 value representing the maximum number of hex characters allowed in an inline binary literal.
   *
   * @generated from enum value: SQL_MAX_BINARY_LITERAL_LENGTH = 541;
   */
  SQL_MAX_BINARY_LITERAL_LENGTH = 541,

  /**
   * Retrieves a int64 value representing the maximum number of characters allowed for a character literal.
   *
   * @generated from enum value: SQL_MAX_CHAR_LITERAL_LENGTH = 542;
   */
  SQL_MAX_CHAR_LITERAL_LENGTH = 542,

  /**
   * Retrieves a int64 value representing the maximum number of characters allowed for a column name.
   *
   * @generated from enum value: SQL_MAX_COLUMN_NAME_LENGTH = 543;
   */
  SQL_MAX_COLUMN_NAME_LENGTH = 543,

  /**
   * Retrieves a int64 value representing the the maximum number of columns allowed in a GROUP BY clause.
   *
   * @generated from enum value: SQL_MAX_COLUMNS_IN_GROUP_BY = 544;
   */
  SQL_MAX_COLUMNS_IN_GROUP_BY = 544,

  /**
   * Retrieves a int64 value representing the maximum number of columns allowed in an index.
   *
   * @generated from enum value: SQL_MAX_COLUMNS_IN_INDEX = 545;
   */
  SQL_MAX_COLUMNS_IN_INDEX = 545,

  /**
   * Retrieves a int64 value representing the maximum number of columns allowed in an ORDER BY clause.
   *
   * @generated from enum value: SQL_MAX_COLUMNS_IN_ORDER_BY = 546;
   */
  SQL_MAX_COLUMNS_IN_ORDER_BY = 546,

  /**
   * Retrieves a int64 value representing the maximum number of columns allowed in a SELECT list.
   *
   * @generated from enum value: SQL_MAX_COLUMNS_IN_SELECT = 547;
   */
  SQL_MAX_COLUMNS_IN_SELECT = 547,

  /**
   * Retrieves a int64 value representing the maximum number of columns allowed in a table.
   *
   * @generated from enum value: SQL_MAX_COLUMNS_IN_TABLE = 548;
   */
  SQL_MAX_COLUMNS_IN_TABLE = 548,

  /**
   * Retrieves a int64 value representing the maximum number of concurrent connections possible.
   *
   * @generated from enum value: SQL_MAX_CONNECTIONS = 549;
   */
  SQL_MAX_CONNECTIONS = 549,

  /**
   * Retrieves a int64 value the maximum number of characters allowed in a cursor name.
   *
   * @generated from enum value: SQL_MAX_CURSOR_NAME_LENGTH = 550;
   */
  SQL_MAX_CURSOR_NAME_LENGTH = 550,

  /**
   *
   * Retrieves a int64 value representing the maximum number of bytes allowed for an index,
   * including all of the parts of the index.
   *
   * @generated from enum value: SQL_MAX_INDEX_LENGTH = 551;
   */
  SQL_MAX_INDEX_LENGTH = 551,

  /**
   * Retrieves a int64 value representing the maximum number of characters allowed in a schema name.
   *
   * @generated from enum value: SQL_DB_SCHEMA_NAME_LENGTH = 552;
   */
  SQL_DB_SCHEMA_NAME_LENGTH = 552,

  /**
   * Retrieves a int64 value representing the maximum number of characters allowed in a procedure name.
   *
   * @generated from enum value: SQL_MAX_PROCEDURE_NAME_LENGTH = 553;
   */
  SQL_MAX_PROCEDURE_NAME_LENGTH = 553,

  /**
   * Retrieves a int64 value representing the maximum number of characters allowed in a catalog name.
   *
   * @generated from enum value: SQL_MAX_CATALOG_NAME_LENGTH = 554;
   */
  SQL_MAX_CATALOG_NAME_LENGTH = 554,

  /**
   * Retrieves a int64 value representing the maximum number of bytes allowed in a single row.
   *
   * @generated from enum value: SQL_MAX_ROW_SIZE = 555;
   */
  SQL_MAX_ROW_SIZE = 555,

  /**
   *
   * Retrieves a boolean indicating whether the return value for the JDBC method getMaxRowSize includes the SQL
   * data types LONGVARCHAR and LONGVARBINARY.
   *
   * Returns:
   * - false: if return value for the JDBC method getMaxRowSize does
   *          not include the SQL data types LONGVARCHAR and LONGVARBINARY;
   * - true: if return value for the JDBC method getMaxRowSize includes
   *         the SQL data types LONGVARCHAR and LONGVARBINARY.
   *
   * @generated from enum value: SQL_MAX_ROW_SIZE_INCLUDES_BLOBS = 556;
   */
  SQL_MAX_ROW_SIZE_INCLUDES_BLOBS = 556,

  /**
   *
   * Retrieves a int64 value representing the maximum number of characters allowed for an SQL statement;
   * a result of 0 (zero) means that there is no limit or the limit is not known.
   *
   * @generated from enum value: SQL_MAX_STATEMENT_LENGTH = 557;
   */
  SQL_MAX_STATEMENT_LENGTH = 557,

  /**
   * Retrieves a int64 value representing the maximum number of active statements that can be open at the same time.
   *
   * @generated from enum value: SQL_MAX_STATEMENTS = 558;
   */
  SQL_MAX_STATEMENTS = 558,

  /**
   * Retrieves a int64 value representing the maximum number of characters allowed in a table name.
   *
   * @generated from enum value: SQL_MAX_TABLE_NAME_LENGTH = 559;
   */
  SQL_MAX_TABLE_NAME_LENGTH = 559,

  /**
   * Retrieves a int64 value representing the maximum number of tables allowed in a SELECT statement.
   *
   * @generated from enum value: SQL_MAX_TABLES_IN_SELECT = 560;
   */
  SQL_MAX_TABLES_IN_SELECT = 560,

  /**
   * Retrieves a int64 value representing the maximum number of characters allowed in a user name.
   *
   * @generated from enum value: SQL_MAX_USERNAME_LENGTH = 561;
   */
  SQL_MAX_USERNAME_LENGTH = 561,

  /**
   *
   * Retrieves this database's default transaction isolation level as described in
   * `arrow.flight.protocol.sql.SqlTransactionIsolationLevel`.
   *
   * Returns a int32 ordinal for the SQL transaction isolation level.
   *
   * @generated from enum value: SQL_DEFAULT_TRANSACTION_ISOLATION = 562;
   */
  SQL_DEFAULT_TRANSACTION_ISOLATION = 562,

  /**
   *
   * Retrieves a boolean value indicating whether transactions are supported. If not, invoking the method commit is a
   * noop, and the isolation level is `arrow.flight.protocol.sql.SqlTransactionIsolationLevel.TRANSACTION_NONE`.
   *
   * Returns:
   * - false: if transactions are unsupported;
   * - true: if transactions are supported.
   *
   * @generated from enum value: SQL_TRANSACTIONS_SUPPORTED = 563;
   */
  SQL_TRANSACTIONS_SUPPORTED = 563,

  /**
   *
   * Retrieves the supported transactions isolation levels.
   *
   * Returns an int32 bitmask value representing the supported transactions isolation levels.
   * The returned bitmask should be parsed in order to retrieve the supported transactions isolation levels.
   *
   * For instance:
   * - return 0   (\b0)     => [] (no supported SQL transactions isolation levels);
   * - return 1   (\b1)     => [SQL_TRANSACTION_NONE];
   * - return 2   (\b10)    => [SQL_TRANSACTION_READ_UNCOMMITTED];
   * - return 3   (\b11)    => [SQL_TRANSACTION_NONE, SQL_TRANSACTION_READ_UNCOMMITTED];
   * - return 4   (\b100)   => [SQL_TRANSACTION_REPEATABLE_READ];
   * - return 5   (\b101)   => [SQL_TRANSACTION_NONE, SQL_TRANSACTION_REPEATABLE_READ];
   * - return 6   (\b110)   => [SQL_TRANSACTION_READ_UNCOMMITTED, SQL_TRANSACTION_REPEATABLE_READ];
   * - return 7   (\b111)   => [SQL_TRANSACTION_NONE, SQL_TRANSACTION_READ_UNCOMMITTED, SQL_TRANSACTION_REPEATABLE_READ];
   * - return 8   (\b1000)  => [SQL_TRANSACTION_REPEATABLE_READ];
   * - return 9   (\b1001)  => [SQL_TRANSACTION_NONE, SQL_TRANSACTION_REPEATABLE_READ];
   * - return 10  (\b1010)  => [SQL_TRANSACTION_READ_UNCOMMITTED, SQL_TRANSACTION_REPEATABLE_READ];
   * - return 11  (\b1011)  => [SQL_TRANSACTION_NONE, SQL_TRANSACTION_READ_UNCOMMITTED, SQL_TRANSACTION_REPEATABLE_READ];
   * - return 12  (\b1100)  => [SQL_TRANSACTION_REPEATABLE_READ, SQL_TRANSACTION_REPEATABLE_READ];
   * - return 13  (\b1101)  => [SQL_TRANSACTION_NONE, SQL_TRANSACTION_REPEATABLE_READ, SQL_TRANSACTION_REPEATABLE_READ];
   * - return 14  (\b1110)  => [SQL_TRANSACTION_READ_UNCOMMITTED, SQL_TRANSACTION_REPEATABLE_READ, SQL_TRANSACTION_REPEATABLE_READ];
   * - return 15  (\b1111)  => [SQL_TRANSACTION_NONE, SQL_TRANSACTION_READ_UNCOMMITTED, SQL_TRANSACTION_REPEATABLE_READ, SQL_TRANSACTION_REPEATABLE_READ];
   * - return 16  (\b10000) => [SQL_TRANSACTION_SERIALIZABLE];
   * - ...
   * Valid SQL positioned commands are described under `arrow.flight.protocol.sql.SqlTransactionIsolationLevel`.
   *
   * @generated from enum value: SQL_SUPPORTED_TRANSACTIONS_ISOLATION_LEVELS = 564;
   */
  SQL_SUPPORTED_TRANSACTIONS_ISOLATION_LEVELS = 564,

  /**
   *
   * Retrieves a boolean value indicating whether a data definition statement within a transaction forces
   * the transaction to commit.
   *
   * Returns:
   * - false: if a data definition statement within a transaction does not force the transaction to commit;
   * - true: if a data definition statement within a transaction forces the transaction to commit.
   *
   * @generated from enum value: SQL_DATA_DEFINITION_CAUSES_TRANSACTION_COMMIT = 565;
   */
  SQL_DATA_DEFINITION_CAUSES_TRANSACTION_COMMIT = 565,

  /**
   *
   * Retrieves a boolean value indicating whether a data definition statement within a transaction is ignored.
   *
   * Returns:
   * - false: if a data definition statement within a transaction is taken into account;
   * - true: a data definition statement within a transaction is ignored.
   *
   * @generated from enum value: SQL_DATA_DEFINITIONS_IN_TRANSACTIONS_IGNORED = 566;
   */
  SQL_DATA_DEFINITIONS_IN_TRANSACTIONS_IGNORED = 566,

  /**
   *
   * Retrieves an int32 bitmask value representing the supported result set types.
   * The returned bitmask should be parsed in order to retrieve the supported result set types.
   *
   * For instance:
   * - return 0   (\b0)     => [] (no supported result set types);
   * - return 1   (\b1)     => [SQL_RESULT_SET_TYPE_UNSPECIFIED];
   * - return 2   (\b10)    => [SQL_RESULT_SET_TYPE_FORWARD_ONLY];
   * - return 3   (\b11)    => [SQL_RESULT_SET_TYPE_UNSPECIFIED, SQL_RESULT_SET_TYPE_FORWARD_ONLY];
   * - return 4   (\b100)   => [SQL_RESULT_SET_TYPE_SCROLL_INSENSITIVE];
   * - return 5   (\b101)   => [SQL_RESULT_SET_TYPE_UNSPECIFIED, SQL_RESULT_SET_TYPE_SCROLL_INSENSITIVE];
   * - return 6   (\b110)   => [SQL_RESULT_SET_TYPE_FORWARD_ONLY, SQL_RESULT_SET_TYPE_SCROLL_INSENSITIVE];
   * - return 7   (\b111)   => [SQL_RESULT_SET_TYPE_UNSPECIFIED, SQL_RESULT_SET_TYPE_FORWARD_ONLY, SQL_RESULT_SET_TYPE_SCROLL_INSENSITIVE];
   * - return 8   (\b1000)  => [SQL_RESULT_SET_TYPE_SCROLL_SENSITIVE];
   * - ...
   * Valid result set types are described under `arrow.flight.protocol.sql.SqlSupportedResultSetType`.
   *
   * @generated from enum value: SQL_SUPPORTED_RESULT_SET_TYPES = 567;
   */
  SQL_SUPPORTED_RESULT_SET_TYPES = 567,

  /**
   *
   * Returns an int32 bitmask value concurrency types supported for
   * `arrow.flight.protocol.sql.SqlSupportedResultSetType.SQL_RESULT_SET_TYPE_UNSPECIFIED`.
   *
   * For instance:
   * - return 0 (\b0)   => [] (no supported concurrency types for this result set type)
   * - return 1 (\b1)   => [SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED]
   * - return 2 (\b10)  => [SQL_RESULT_SET_CONCURRENCY_READ_ONLY]
   * - return 3 (\b11)  => [SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED, SQL_RESULT_SET_CONCURRENCY_READ_ONLY]
   * - return 4 (\b100) => [SQL_RESULT_SET_CONCURRENCY_UPDATABLE]
   * - return 5 (\b101) => [SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED, SQL_RESULT_SET_CONCURRENCY_UPDATABLE]
   * - return 6 (\b110)  => [SQL_RESULT_SET_CONCURRENCY_READ_ONLY, SQL_RESULT_SET_CONCURRENCY_UPDATABLE]
   * - return 7 (\b111)  => [SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED, SQL_RESULT_SET_CONCURRENCY_READ_ONLY, SQL_RESULT_SET_CONCURRENCY_UPDATABLE]
   * Valid result set types are described under `arrow.flight.protocol.sql.SqlSupportedResultSetConcurrency`.
   *
   * @generated from enum value: SQL_SUPPORTED_CONCURRENCIES_FOR_RESULT_SET_UNSPECIFIED = 568;
   */
  SQL_SUPPORTED_CONCURRENCIES_FOR_RESULT_SET_UNSPECIFIED = 568,

  /**
   *
   * Returns an int32 bitmask value concurrency types supported for
   * `arrow.flight.protocol.sql.SqlSupportedResultSetType.SQL_RESULT_SET_TYPE_FORWARD_ONLY`.
   *
   * For instance:
   * - return 0 (\b0)   => [] (no supported concurrency types for this result set type)
   * - return 1 (\b1)   => [SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED]
   * - return 2 (\b10)  => [SQL_RESULT_SET_CONCURRENCY_READ_ONLY]
   * - return 3 (\b11)  => [SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED, SQL_RESULT_SET_CONCURRENCY_READ_ONLY]
   * - return 4 (\b100) => [SQL_RESULT_SET_CONCURRENCY_UPDATABLE]
   * - return 5 (\b101) => [SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED, SQL_RESULT_SET_CONCURRENCY_UPDATABLE]
   * - return 6 (\b110)  => [SQL_RESULT_SET_CONCURRENCY_READ_ONLY, SQL_RESULT_SET_CONCURRENCY_UPDATABLE]
   * - return 7 (\b111)  => [SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED, SQL_RESULT_SET_CONCURRENCY_READ_ONLY, SQL_RESULT_SET_CONCURRENCY_UPDATABLE]
   * Valid result set types are described under `arrow.flight.protocol.sql.SqlSupportedResultSetConcurrency`.
   *
   * @generated from enum value: SQL_SUPPORTED_CONCURRENCIES_FOR_RESULT_SET_FORWARD_ONLY = 569;
   */
  SQL_SUPPORTED_CONCURRENCIES_FOR_RESULT_SET_FORWARD_ONLY = 569,

  /**
   *
   * Returns an int32 bitmask value concurrency types supported for
   * `arrow.flight.protocol.sql.SqlSupportedResultSetType.SQL_RESULT_SET_TYPE_SCROLL_SENSITIVE`.
   *
   * For instance:
   * - return 0 (\b0)   => [] (no supported concurrency types for this result set type)
   * - return 1 (\b1)   => [SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED]
   * - return 2 (\b10)  => [SQL_RESULT_SET_CONCURRENCY_READ_ONLY]
   * - return 3 (\b11)  => [SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED, SQL_RESULT_SET_CONCURRENCY_READ_ONLY]
   * - return 4 (\b100) => [SQL_RESULT_SET_CONCURRENCY_UPDATABLE]
   * - return 5 (\b101) => [SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED, SQL_RESULT_SET_CONCURRENCY_UPDATABLE]
   * - return 6 (\b110)  => [SQL_RESULT_SET_CONCURRENCY_READ_ONLY, SQL_RESULT_SET_CONCURRENCY_UPDATABLE]
   * - return 7 (\b111)  => [SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED, SQL_RESULT_SET_CONCURRENCY_READ_ONLY, SQL_RESULT_SET_CONCURRENCY_UPDATABLE]
   * Valid result set types are described under `arrow.flight.protocol.sql.SqlSupportedResultSetConcurrency`.
   *
   * @generated from enum value: SQL_SUPPORTED_CONCURRENCIES_FOR_RESULT_SET_SCROLL_SENSITIVE = 570;
   */
  SQL_SUPPORTED_CONCURRENCIES_FOR_RESULT_SET_SCROLL_SENSITIVE = 570,

  /**
   *
   * Returns an int32 bitmask value concurrency types supported for
   * `arrow.flight.protocol.sql.SqlSupportedResultSetType.SQL_RESULT_SET_TYPE_SCROLL_INSENSITIVE`.
   *
   * For instance:
   * - return 0 (\b0)   => [] (no supported concurrency types for this result set type)
   * - return 1 (\b1)   => [SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED]
   * - return 2 (\b10)  => [SQL_RESULT_SET_CONCURRENCY_READ_ONLY]
   * - return 3 (\b11)  => [SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED, SQL_RESULT_SET_CONCURRENCY_READ_ONLY]
   * - return 4 (\b100) => [SQL_RESULT_SET_CONCURRENCY_UPDATABLE]
   * - return 5 (\b101) => [SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED, SQL_RESULT_SET_CONCURRENCY_UPDATABLE]
   * - return 6 (\b110)  => [SQL_RESULT_SET_CONCURRENCY_READ_ONLY, SQL_RESULT_SET_CONCURRENCY_UPDATABLE]
   * - return 7 (\b111)  => [SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED, SQL_RESULT_SET_CONCURRENCY_READ_ONLY, SQL_RESULT_SET_CONCURRENCY_UPDATABLE]
   * Valid result set types are described under `arrow.flight.protocol.sql.SqlSupportedResultSetConcurrency`.
   *
   * @generated from enum value: SQL_SUPPORTED_CONCURRENCIES_FOR_RESULT_SET_SCROLL_INSENSITIVE = 571;
   */
  SQL_SUPPORTED_CONCURRENCIES_FOR_RESULT_SET_SCROLL_INSENSITIVE = 571,

  /**
   *
   * Retrieves a boolean value indicating whether this database supports batch updates.
   *
   * - false: if this database does not support batch updates;
   * - true: if this database supports batch updates.
   *
   * @generated from enum value: SQL_BATCH_UPDATES_SUPPORTED = 572;
   */
  SQL_BATCH_UPDATES_SUPPORTED = 572,

  /**
   *
   * Retrieves a boolean value indicating whether this database supports savepoints.
   *
   * Returns:
   * - false: if this database does not support savepoints;
   * - true: if this database supports savepoints.
   *
   * @generated from enum value: SQL_SAVEPOINTS_SUPPORTED = 573;
   */
  SQL_SAVEPOINTS_SUPPORTED = 573,

  /**
   *
   * Retrieves a boolean value indicating whether named parameters are supported in callable statements.
   *
   * Returns:
   * - false: if named parameters in callable statements are unsupported;
   * - true: if named parameters in callable statements are supported.
   *
   * @generated from enum value: SQL_NAMED_PARAMETERS_SUPPORTED = 574;
   */
  SQL_NAMED_PARAMETERS_SUPPORTED = 574,

  /**
   *
   * Retrieves a boolean value indicating whether updates made to a LOB are made on a copy or directly to the LOB.
   *
   * Returns:
   * - false: if updates made to a LOB are made directly to the LOB;
   * - true: if updates made to a LOB are made on a copy.
   *
   * @generated from enum value: SQL_LOCATORS_UPDATE_COPY = 575;
   */
  SQL_LOCATORS_UPDATE_COPY = 575,

  /**
   *
   * Retrieves a boolean value indicating whether invoking user-defined or vendor functions
   * using the stored procedure escape syntax is supported.
   *
   * Returns:
   * - false: if invoking user-defined or vendor functions using the stored procedure escape syntax is unsupported;
   * - true: if invoking user-defined or vendor functions using the stored procedure escape syntax is supported.
   *
   * @generated from enum value: SQL_STORED_FUNCTIONS_USING_CALL_SYNTAX_SUPPORTED = 576;
   */
  SQL_STORED_FUNCTIONS_USING_CALL_SYNTAX_SUPPORTED = 576,
}
// Retrieve enum metadata with: proto3.getEnumType(SqlInfo)
proto3.util.setEnumType(SqlInfo, "arrow.flight.protocol.sql.SqlInfo", [
  { no: 0, name: "FLIGHT_SQL_SERVER_NAME" },
  { no: 1, name: "FLIGHT_SQL_SERVER_VERSION" },
  { no: 2, name: "FLIGHT_SQL_SERVER_ARROW_VERSION" },
  { no: 3, name: "FLIGHT_SQL_SERVER_READ_ONLY" },
  { no: 4, name: "FLIGHT_SQL_SERVER_SQL" },
  { no: 5, name: "FLIGHT_SQL_SERVER_SUBSTRAIT" },
  { no: 6, name: "FLIGHT_SQL_SERVER_SUBSTRAIT_MIN_VERSION" },
  { no: 7, name: "FLIGHT_SQL_SERVER_SUBSTRAIT_MAX_VERSION" },
  { no: 8, name: "FLIGHT_SQL_SERVER_TRANSACTION" },
  { no: 9, name: "FLIGHT_SQL_SERVER_CANCEL" },
  { no: 100, name: "FLIGHT_SQL_SERVER_STATEMENT_TIMEOUT" },
  { no: 101, name: "FLIGHT_SQL_SERVER_TRANSACTION_TIMEOUT" },
  { no: 500, name: "SQL_DDL_CATALOG" },
  { no: 501, name: "SQL_DDL_SCHEMA" },
  { no: 502, name: "SQL_DDL_TABLE" },
  { no: 503, name: "SQL_IDENTIFIER_CASE" },
  { no: 504, name: "SQL_IDENTIFIER_QUOTE_CHAR" },
  { no: 505, name: "SQL_QUOTED_IDENTIFIER_CASE" },
  { no: 506, name: "SQL_ALL_TABLES_ARE_SELECTABLE" },
  { no: 507, name: "SQL_NULL_ORDERING" },
  { no: 508, name: "SQL_KEYWORDS" },
  { no: 509, name: "SQL_NUMERIC_FUNCTIONS" },
  { no: 510, name: "SQL_STRING_FUNCTIONS" },
  { no: 511, name: "SQL_SYSTEM_FUNCTIONS" },
  { no: 512, name: "SQL_DATETIME_FUNCTIONS" },
  { no: 513, name: "SQL_SEARCH_STRING_ESCAPE" },
  { no: 514, name: "SQL_EXTRA_NAME_CHARACTERS" },
  { no: 515, name: "SQL_SUPPORTS_COLUMN_ALIASING" },
  { no: 516, name: "SQL_NULL_PLUS_NULL_IS_NULL" },
  { no: 517, name: "SQL_SUPPORTS_CONVERT" },
  { no: 518, name: "SQL_SUPPORTS_TABLE_CORRELATION_NAMES" },
  { no: 519, name: "SQL_SUPPORTS_DIFFERENT_TABLE_CORRELATION_NAMES" },
  { no: 520, name: "SQL_SUPPORTS_EXPRESSIONS_IN_ORDER_BY" },
  { no: 521, name: "SQL_SUPPORTS_ORDER_BY_UNRELATED" },
  { no: 522, name: "SQL_SUPPORTED_GROUP_BY" },
  { no: 523, name: "SQL_SUPPORTS_LIKE_ESCAPE_CLAUSE" },
  { no: 524, name: "SQL_SUPPORTS_NON_NULLABLE_COLUMNS" },
  { no: 525, name: "SQL_SUPPORTED_GRAMMAR" },
  { no: 526, name: "SQL_ANSI92_SUPPORTED_LEVEL" },
  { no: 527, name: "SQL_SUPPORTS_INTEGRITY_ENHANCEMENT_FACILITY" },
  { no: 528, name: "SQL_OUTER_JOINS_SUPPORT_LEVEL" },
  { no: 529, name: "SQL_SCHEMA_TERM" },
  { no: 530, name: "SQL_PROCEDURE_TERM" },
  { no: 531, name: "SQL_CATALOG_TERM" },
  { no: 532, name: "SQL_CATALOG_AT_START" },
  { no: 533, name: "SQL_SCHEMAS_SUPPORTED_ACTIONS" },
  { no: 534, name: "SQL_CATALOGS_SUPPORTED_ACTIONS" },
  { no: 535, name: "SQL_SUPPORTED_POSITIONED_COMMANDS" },
  { no: 536, name: "SQL_SELECT_FOR_UPDATE_SUPPORTED" },
  { no: 537, name: "SQL_STORED_PROCEDURES_SUPPORTED" },
  { no: 538, name: "SQL_SUPPORTED_SUBQUERIES" },
  { no: 539, name: "SQL_CORRELATED_SUBQUERIES_SUPPORTED" },
  { no: 540, name: "SQL_SUPPORTED_UNIONS" },
  { no: 541, name: "SQL_MAX_BINARY_LITERAL_LENGTH" },
  { no: 542, name: "SQL_MAX_CHAR_LITERAL_LENGTH" },
  { no: 543, name: "SQL_MAX_COLUMN_NAME_LENGTH" },
  { no: 544, name: "SQL_MAX_COLUMNS_IN_GROUP_BY" },
  { no: 545, name: "SQL_MAX_COLUMNS_IN_INDEX" },
  { no: 546, name: "SQL_MAX_COLUMNS_IN_ORDER_BY" },
  { no: 547, name: "SQL_MAX_COLUMNS_IN_SELECT" },
  { no: 548, name: "SQL_MAX_COLUMNS_IN_TABLE" },
  { no: 549, name: "SQL_MAX_CONNECTIONS" },
  { no: 550, name: "SQL_MAX_CURSOR_NAME_LENGTH" },
  { no: 551, name: "SQL_MAX_INDEX_LENGTH" },
  { no: 552, name: "SQL_DB_SCHEMA_NAME_LENGTH" },
  { no: 553, name: "SQL_MAX_PROCEDURE_NAME_LENGTH" },
  { no: 554, name: "SQL_MAX_CATALOG_NAME_LENGTH" },
  { no: 555, name: "SQL_MAX_ROW_SIZE" },
  { no: 556, name: "SQL_MAX_ROW_SIZE_INCLUDES_BLOBS" },
  { no: 557, name: "SQL_MAX_STATEMENT_LENGTH" },
  { no: 558, name: "SQL_MAX_STATEMENTS" },
  { no: 559, name: "SQL_MAX_TABLE_NAME_LENGTH" },
  { no: 560, name: "SQL_MAX_TABLES_IN_SELECT" },
  { no: 561, name: "SQL_MAX_USERNAME_LENGTH" },
  { no: 562, name: "SQL_DEFAULT_TRANSACTION_ISOLATION" },
  { no: 563, name: "SQL_TRANSACTIONS_SUPPORTED" },
  { no: 564, name: "SQL_SUPPORTED_TRANSACTIONS_ISOLATION_LEVELS" },
  { no: 565, name: "SQL_DATA_DEFINITION_CAUSES_TRANSACTION_COMMIT" },
  { no: 566, name: "SQL_DATA_DEFINITIONS_IN_TRANSACTIONS_IGNORED" },
  { no: 567, name: "SQL_SUPPORTED_RESULT_SET_TYPES" },
  { no: 568, name: "SQL_SUPPORTED_CONCURRENCIES_FOR_RESULT_SET_UNSPECIFIED" },
  { no: 569, name: "SQL_SUPPORTED_CONCURRENCIES_FOR_RESULT_SET_FORWARD_ONLY" },
  { no: 570, name: "SQL_SUPPORTED_CONCURRENCIES_FOR_RESULT_SET_SCROLL_SENSITIVE" },
  { no: 571, name: "SQL_SUPPORTED_CONCURRENCIES_FOR_RESULT_SET_SCROLL_INSENSITIVE" },
  { no: 572, name: "SQL_BATCH_UPDATES_SUPPORTED" },
  { no: 573, name: "SQL_SAVEPOINTS_SUPPORTED" },
  { no: 574, name: "SQL_NAMED_PARAMETERS_SUPPORTED" },
  { no: 575, name: "SQL_LOCATORS_UPDATE_COPY" },
  { no: 576, name: "SQL_STORED_FUNCTIONS_USING_CALL_SYNTAX_SUPPORTED" },
]);

/**
 * The level of support for Flight SQL transaction RPCs.
 *
 * @generated from enum arrow.flight.protocol.sql.SqlSupportedTransaction
 */
export enum SqlSupportedTransaction {
  /**
   * Unknown/not indicated/no support
   *
   * @generated from enum value: SQL_SUPPORTED_TRANSACTION_NONE = 0;
   */
  NONE = 0,

  /**
   * Transactions, but not savepoints.
   * A savepoint is a mark within a transaction that can be individually
   * rolled back to. Not all databases support savepoints.
   *
   * @generated from enum value: SQL_SUPPORTED_TRANSACTION_TRANSACTION = 1;
   */
  TRANSACTION = 1,

  /**
   * Transactions and savepoints
   *
   * @generated from enum value: SQL_SUPPORTED_TRANSACTION_SAVEPOINT = 2;
   */
  SAVEPOINT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SqlSupportedTransaction)
proto3.util.setEnumType(SqlSupportedTransaction, "arrow.flight.protocol.sql.SqlSupportedTransaction", [
  { no: 0, name: "SQL_SUPPORTED_TRANSACTION_NONE" },
  { no: 1, name: "SQL_SUPPORTED_TRANSACTION_TRANSACTION" },
  { no: 2, name: "SQL_SUPPORTED_TRANSACTION_SAVEPOINT" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.SqlSupportedCaseSensitivity
 */
export enum SqlSupportedCaseSensitivity {
  /**
   * @generated from enum value: SQL_CASE_SENSITIVITY_UNKNOWN = 0;
   */
  SQL_CASE_SENSITIVITY_UNKNOWN = 0,

  /**
   * @generated from enum value: SQL_CASE_SENSITIVITY_CASE_INSENSITIVE = 1;
   */
  SQL_CASE_SENSITIVITY_CASE_INSENSITIVE = 1,

  /**
   * @generated from enum value: SQL_CASE_SENSITIVITY_UPPERCASE = 2;
   */
  SQL_CASE_SENSITIVITY_UPPERCASE = 2,

  /**
   * @generated from enum value: SQL_CASE_SENSITIVITY_LOWERCASE = 3;
   */
  SQL_CASE_SENSITIVITY_LOWERCASE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SqlSupportedCaseSensitivity)
proto3.util.setEnumType(SqlSupportedCaseSensitivity, "arrow.flight.protocol.sql.SqlSupportedCaseSensitivity", [
  { no: 0, name: "SQL_CASE_SENSITIVITY_UNKNOWN" },
  { no: 1, name: "SQL_CASE_SENSITIVITY_CASE_INSENSITIVE" },
  { no: 2, name: "SQL_CASE_SENSITIVITY_UPPERCASE" },
  { no: 3, name: "SQL_CASE_SENSITIVITY_LOWERCASE" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.SqlNullOrdering
 */
export enum SqlNullOrdering {
  /**
   * @generated from enum value: SQL_NULLS_SORTED_HIGH = 0;
   */
  SQL_NULLS_SORTED_HIGH = 0,

  /**
   * @generated from enum value: SQL_NULLS_SORTED_LOW = 1;
   */
  SQL_NULLS_SORTED_LOW = 1,

  /**
   * @generated from enum value: SQL_NULLS_SORTED_AT_START = 2;
   */
  SQL_NULLS_SORTED_AT_START = 2,

  /**
   * @generated from enum value: SQL_NULLS_SORTED_AT_END = 3;
   */
  SQL_NULLS_SORTED_AT_END = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SqlNullOrdering)
proto3.util.setEnumType(SqlNullOrdering, "arrow.flight.protocol.sql.SqlNullOrdering", [
  { no: 0, name: "SQL_NULLS_SORTED_HIGH" },
  { no: 1, name: "SQL_NULLS_SORTED_LOW" },
  { no: 2, name: "SQL_NULLS_SORTED_AT_START" },
  { no: 3, name: "SQL_NULLS_SORTED_AT_END" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.SupportedSqlGrammar
 */
export enum SupportedSqlGrammar {
  /**
   * @generated from enum value: SQL_MINIMUM_GRAMMAR = 0;
   */
  SQL_MINIMUM_GRAMMAR = 0,

  /**
   * @generated from enum value: SQL_CORE_GRAMMAR = 1;
   */
  SQL_CORE_GRAMMAR = 1,

  /**
   * @generated from enum value: SQL_EXTENDED_GRAMMAR = 2;
   */
  SQL_EXTENDED_GRAMMAR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SupportedSqlGrammar)
proto3.util.setEnumType(SupportedSqlGrammar, "arrow.flight.protocol.sql.SupportedSqlGrammar", [
  { no: 0, name: "SQL_MINIMUM_GRAMMAR" },
  { no: 1, name: "SQL_CORE_GRAMMAR" },
  { no: 2, name: "SQL_EXTENDED_GRAMMAR" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.SupportedAnsi92SqlGrammarLevel
 */
export enum SupportedAnsi92SqlGrammarLevel {
  /**
   * @generated from enum value: ANSI92_ENTRY_SQL = 0;
   */
  ANSI92_ENTRY_SQL = 0,

  /**
   * @generated from enum value: ANSI92_INTERMEDIATE_SQL = 1;
   */
  ANSI92_INTERMEDIATE_SQL = 1,

  /**
   * @generated from enum value: ANSI92_FULL_SQL = 2;
   */
  ANSI92_FULL_SQL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SupportedAnsi92SqlGrammarLevel)
proto3.util.setEnumType(SupportedAnsi92SqlGrammarLevel, "arrow.flight.protocol.sql.SupportedAnsi92SqlGrammarLevel", [
  { no: 0, name: "ANSI92_ENTRY_SQL" },
  { no: 1, name: "ANSI92_INTERMEDIATE_SQL" },
  { no: 2, name: "ANSI92_FULL_SQL" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.SqlOuterJoinsSupportLevel
 */
export enum SqlOuterJoinsSupportLevel {
  /**
   * @generated from enum value: SQL_JOINS_UNSUPPORTED = 0;
   */
  SQL_JOINS_UNSUPPORTED = 0,

  /**
   * @generated from enum value: SQL_LIMITED_OUTER_JOINS = 1;
   */
  SQL_LIMITED_OUTER_JOINS = 1,

  /**
   * @generated from enum value: SQL_FULL_OUTER_JOINS = 2;
   */
  SQL_FULL_OUTER_JOINS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SqlOuterJoinsSupportLevel)
proto3.util.setEnumType(SqlOuterJoinsSupportLevel, "arrow.flight.protocol.sql.SqlOuterJoinsSupportLevel", [
  { no: 0, name: "SQL_JOINS_UNSUPPORTED" },
  { no: 1, name: "SQL_LIMITED_OUTER_JOINS" },
  { no: 2, name: "SQL_FULL_OUTER_JOINS" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.SqlSupportedGroupBy
 */
export enum SqlSupportedGroupBy {
  /**
   * @generated from enum value: SQL_GROUP_BY_UNRELATED = 0;
   */
  SQL_GROUP_BY_UNRELATED = 0,

  /**
   * @generated from enum value: SQL_GROUP_BY_BEYOND_SELECT = 1;
   */
  SQL_GROUP_BY_BEYOND_SELECT = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(SqlSupportedGroupBy)
proto3.util.setEnumType(SqlSupportedGroupBy, "arrow.flight.protocol.sql.SqlSupportedGroupBy", [
  { no: 0, name: "SQL_GROUP_BY_UNRELATED" },
  { no: 1, name: "SQL_GROUP_BY_BEYOND_SELECT" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.SqlSupportedElementActions
 */
export enum SqlSupportedElementActions {
  /**
   * @generated from enum value: SQL_ELEMENT_IN_PROCEDURE_CALLS = 0;
   */
  SQL_ELEMENT_IN_PROCEDURE_CALLS = 0,

  /**
   * @generated from enum value: SQL_ELEMENT_IN_INDEX_DEFINITIONS = 1;
   */
  SQL_ELEMENT_IN_INDEX_DEFINITIONS = 1,

  /**
   * @generated from enum value: SQL_ELEMENT_IN_PRIVILEGE_DEFINITIONS = 2;
   */
  SQL_ELEMENT_IN_PRIVILEGE_DEFINITIONS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SqlSupportedElementActions)
proto3.util.setEnumType(SqlSupportedElementActions, "arrow.flight.protocol.sql.SqlSupportedElementActions", [
  { no: 0, name: "SQL_ELEMENT_IN_PROCEDURE_CALLS" },
  { no: 1, name: "SQL_ELEMENT_IN_INDEX_DEFINITIONS" },
  { no: 2, name: "SQL_ELEMENT_IN_PRIVILEGE_DEFINITIONS" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.SqlSupportedPositionedCommands
 */
export enum SqlSupportedPositionedCommands {
  /**
   * @generated from enum value: SQL_POSITIONED_DELETE = 0;
   */
  SQL_POSITIONED_DELETE = 0,

  /**
   * @generated from enum value: SQL_POSITIONED_UPDATE = 1;
   */
  SQL_POSITIONED_UPDATE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(SqlSupportedPositionedCommands)
proto3.util.setEnumType(SqlSupportedPositionedCommands, "arrow.flight.protocol.sql.SqlSupportedPositionedCommands", [
  { no: 0, name: "SQL_POSITIONED_DELETE" },
  { no: 1, name: "SQL_POSITIONED_UPDATE" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.SqlSupportedSubqueries
 */
export enum SqlSupportedSubqueries {
  /**
   * @generated from enum value: SQL_SUBQUERIES_IN_COMPARISONS = 0;
   */
  SQL_SUBQUERIES_IN_COMPARISONS = 0,

  /**
   * @generated from enum value: SQL_SUBQUERIES_IN_EXISTS = 1;
   */
  SQL_SUBQUERIES_IN_EXISTS = 1,

  /**
   * @generated from enum value: SQL_SUBQUERIES_IN_INS = 2;
   */
  SQL_SUBQUERIES_IN_INS = 2,

  /**
   * @generated from enum value: SQL_SUBQUERIES_IN_QUANTIFIEDS = 3;
   */
  SQL_SUBQUERIES_IN_QUANTIFIEDS = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SqlSupportedSubqueries)
proto3.util.setEnumType(SqlSupportedSubqueries, "arrow.flight.protocol.sql.SqlSupportedSubqueries", [
  { no: 0, name: "SQL_SUBQUERIES_IN_COMPARISONS" },
  { no: 1, name: "SQL_SUBQUERIES_IN_EXISTS" },
  { no: 2, name: "SQL_SUBQUERIES_IN_INS" },
  { no: 3, name: "SQL_SUBQUERIES_IN_QUANTIFIEDS" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.SqlSupportedUnions
 */
export enum SqlSupportedUnions {
  /**
   * @generated from enum value: SQL_UNION = 0;
   */
  SQL_UNION = 0,

  /**
   * @generated from enum value: SQL_UNION_ALL = 1;
   */
  SQL_UNION_ALL = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(SqlSupportedUnions)
proto3.util.setEnumType(SqlSupportedUnions, "arrow.flight.protocol.sql.SqlSupportedUnions", [
  { no: 0, name: "SQL_UNION" },
  { no: 1, name: "SQL_UNION_ALL" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.SqlTransactionIsolationLevel
 */
export enum SqlTransactionIsolationLevel {
  /**
   * @generated from enum value: SQL_TRANSACTION_NONE = 0;
   */
  SQL_TRANSACTION_NONE = 0,

  /**
   * @generated from enum value: SQL_TRANSACTION_READ_UNCOMMITTED = 1;
   */
  SQL_TRANSACTION_READ_UNCOMMITTED = 1,

  /**
   * @generated from enum value: SQL_TRANSACTION_READ_COMMITTED = 2;
   */
  SQL_TRANSACTION_READ_COMMITTED = 2,

  /**
   * @generated from enum value: SQL_TRANSACTION_REPEATABLE_READ = 3;
   */
  SQL_TRANSACTION_REPEATABLE_READ = 3,

  /**
   * @generated from enum value: SQL_TRANSACTION_SERIALIZABLE = 4;
   */
  SQL_TRANSACTION_SERIALIZABLE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(SqlTransactionIsolationLevel)
proto3.util.setEnumType(SqlTransactionIsolationLevel, "arrow.flight.protocol.sql.SqlTransactionIsolationLevel", [
  { no: 0, name: "SQL_TRANSACTION_NONE" },
  { no: 1, name: "SQL_TRANSACTION_READ_UNCOMMITTED" },
  { no: 2, name: "SQL_TRANSACTION_READ_COMMITTED" },
  { no: 3, name: "SQL_TRANSACTION_REPEATABLE_READ" },
  { no: 4, name: "SQL_TRANSACTION_SERIALIZABLE" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.SqlSupportedTransactions
 */
export enum SqlSupportedTransactions {
  /**
   * @generated from enum value: SQL_TRANSACTION_UNSPECIFIED = 0;
   */
  SQL_TRANSACTION_UNSPECIFIED = 0,

  /**
   * @generated from enum value: SQL_DATA_DEFINITION_TRANSACTIONS = 1;
   */
  SQL_DATA_DEFINITION_TRANSACTIONS = 1,

  /**
   * @generated from enum value: SQL_DATA_MANIPULATION_TRANSACTIONS = 2;
   */
  SQL_DATA_MANIPULATION_TRANSACTIONS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SqlSupportedTransactions)
proto3.util.setEnumType(SqlSupportedTransactions, "arrow.flight.protocol.sql.SqlSupportedTransactions", [
  { no: 0, name: "SQL_TRANSACTION_UNSPECIFIED" },
  { no: 1, name: "SQL_DATA_DEFINITION_TRANSACTIONS" },
  { no: 2, name: "SQL_DATA_MANIPULATION_TRANSACTIONS" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.SqlSupportedResultSetType
 */
export enum SqlSupportedResultSetType {
  /**
   * @generated from enum value: SQL_RESULT_SET_TYPE_UNSPECIFIED = 0;
   */
  SQL_RESULT_SET_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: SQL_RESULT_SET_TYPE_FORWARD_ONLY = 1;
   */
  SQL_RESULT_SET_TYPE_FORWARD_ONLY = 1,

  /**
   * @generated from enum value: SQL_RESULT_SET_TYPE_SCROLL_INSENSITIVE = 2;
   */
  SQL_RESULT_SET_TYPE_SCROLL_INSENSITIVE = 2,

  /**
   * @generated from enum value: SQL_RESULT_SET_TYPE_SCROLL_SENSITIVE = 3;
   */
  SQL_RESULT_SET_TYPE_SCROLL_SENSITIVE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SqlSupportedResultSetType)
proto3.util.setEnumType(SqlSupportedResultSetType, "arrow.flight.protocol.sql.SqlSupportedResultSetType", [
  { no: 0, name: "SQL_RESULT_SET_TYPE_UNSPECIFIED" },
  { no: 1, name: "SQL_RESULT_SET_TYPE_FORWARD_ONLY" },
  { no: 2, name: "SQL_RESULT_SET_TYPE_SCROLL_INSENSITIVE" },
  { no: 3, name: "SQL_RESULT_SET_TYPE_SCROLL_SENSITIVE" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.SqlSupportedResultSetConcurrency
 */
export enum SqlSupportedResultSetConcurrency {
  /**
   * @generated from enum value: SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED = 0;
   */
  SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED = 0,

  /**
   * @generated from enum value: SQL_RESULT_SET_CONCURRENCY_READ_ONLY = 1;
   */
  SQL_RESULT_SET_CONCURRENCY_READ_ONLY = 1,

  /**
   * @generated from enum value: SQL_RESULT_SET_CONCURRENCY_UPDATABLE = 2;
   */
  SQL_RESULT_SET_CONCURRENCY_UPDATABLE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SqlSupportedResultSetConcurrency)
proto3.util.setEnumType(SqlSupportedResultSetConcurrency, "arrow.flight.protocol.sql.SqlSupportedResultSetConcurrency", [
  { no: 0, name: "SQL_RESULT_SET_CONCURRENCY_UNSPECIFIED" },
  { no: 1, name: "SQL_RESULT_SET_CONCURRENCY_READ_ONLY" },
  { no: 2, name: "SQL_RESULT_SET_CONCURRENCY_UPDATABLE" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.SqlSupportsConvert
 */
export enum SqlSupportsConvert {
  /**
   * @generated from enum value: SQL_CONVERT_BIGINT = 0;
   */
  SQL_CONVERT_BIGINT = 0,

  /**
   * @generated from enum value: SQL_CONVERT_BINARY = 1;
   */
  SQL_CONVERT_BINARY = 1,

  /**
   * @generated from enum value: SQL_CONVERT_BIT = 2;
   */
  SQL_CONVERT_BIT = 2,

  /**
   * @generated from enum value: SQL_CONVERT_CHAR = 3;
   */
  SQL_CONVERT_CHAR = 3,

  /**
   * @generated from enum value: SQL_CONVERT_DATE = 4;
   */
  SQL_CONVERT_DATE = 4,

  /**
   * @generated from enum value: SQL_CONVERT_DECIMAL = 5;
   */
  SQL_CONVERT_DECIMAL = 5,

  /**
   * @generated from enum value: SQL_CONVERT_FLOAT = 6;
   */
  SQL_CONVERT_FLOAT = 6,

  /**
   * @generated from enum value: SQL_CONVERT_INTEGER = 7;
   */
  SQL_CONVERT_INTEGER = 7,

  /**
   * @generated from enum value: SQL_CONVERT_INTERVAL_DAY_TIME = 8;
   */
  SQL_CONVERT_INTERVAL_DAY_TIME = 8,

  /**
   * @generated from enum value: SQL_CONVERT_INTERVAL_YEAR_MONTH = 9;
   */
  SQL_CONVERT_INTERVAL_YEAR_MONTH = 9,

  /**
   * @generated from enum value: SQL_CONVERT_LONGVARBINARY = 10;
   */
  SQL_CONVERT_LONGVARBINARY = 10,

  /**
   * @generated from enum value: SQL_CONVERT_LONGVARCHAR = 11;
   */
  SQL_CONVERT_LONGVARCHAR = 11,

  /**
   * @generated from enum value: SQL_CONVERT_NUMERIC = 12;
   */
  SQL_CONVERT_NUMERIC = 12,

  /**
   * @generated from enum value: SQL_CONVERT_REAL = 13;
   */
  SQL_CONVERT_REAL = 13,

  /**
   * @generated from enum value: SQL_CONVERT_SMALLINT = 14;
   */
  SQL_CONVERT_SMALLINT = 14,

  /**
   * @generated from enum value: SQL_CONVERT_TIME = 15;
   */
  SQL_CONVERT_TIME = 15,

  /**
   * @generated from enum value: SQL_CONVERT_TIMESTAMP = 16;
   */
  SQL_CONVERT_TIMESTAMP = 16,

  /**
   * @generated from enum value: SQL_CONVERT_TINYINT = 17;
   */
  SQL_CONVERT_TINYINT = 17,

  /**
   * @generated from enum value: SQL_CONVERT_VARBINARY = 18;
   */
  SQL_CONVERT_VARBINARY = 18,

  /**
   * @generated from enum value: SQL_CONVERT_VARCHAR = 19;
   */
  SQL_CONVERT_VARCHAR = 19,
}
// Retrieve enum metadata with: proto3.getEnumType(SqlSupportsConvert)
proto3.util.setEnumType(SqlSupportsConvert, "arrow.flight.protocol.sql.SqlSupportsConvert", [
  { no: 0, name: "SQL_CONVERT_BIGINT" },
  { no: 1, name: "SQL_CONVERT_BINARY" },
  { no: 2, name: "SQL_CONVERT_BIT" },
  { no: 3, name: "SQL_CONVERT_CHAR" },
  { no: 4, name: "SQL_CONVERT_DATE" },
  { no: 5, name: "SQL_CONVERT_DECIMAL" },
  { no: 6, name: "SQL_CONVERT_FLOAT" },
  { no: 7, name: "SQL_CONVERT_INTEGER" },
  { no: 8, name: "SQL_CONVERT_INTERVAL_DAY_TIME" },
  { no: 9, name: "SQL_CONVERT_INTERVAL_YEAR_MONTH" },
  { no: 10, name: "SQL_CONVERT_LONGVARBINARY" },
  { no: 11, name: "SQL_CONVERT_LONGVARCHAR" },
  { no: 12, name: "SQL_CONVERT_NUMERIC" },
  { no: 13, name: "SQL_CONVERT_REAL" },
  { no: 14, name: "SQL_CONVERT_SMALLINT" },
  { no: 15, name: "SQL_CONVERT_TIME" },
  { no: 16, name: "SQL_CONVERT_TIMESTAMP" },
  { no: 17, name: "SQL_CONVERT_TINYINT" },
  { no: 18, name: "SQL_CONVERT_VARBINARY" },
  { no: 19, name: "SQL_CONVERT_VARCHAR" },
]);

/**
 * *
 * The JDBC/ODBC-defined type of any object.
 * All the values here are the sames as in the JDBC and ODBC specs.
 *
 * @generated from enum arrow.flight.protocol.sql.XdbcDataType
 */
export enum XdbcDataType {
  /**
   * @generated from enum value: XDBC_UNKNOWN_TYPE = 0;
   */
  XDBC_UNKNOWN_TYPE = 0,

  /**
   * @generated from enum value: XDBC_CHAR = 1;
   */
  XDBC_CHAR = 1,

  /**
   * @generated from enum value: XDBC_NUMERIC = 2;
   */
  XDBC_NUMERIC = 2,

  /**
   * @generated from enum value: XDBC_DECIMAL = 3;
   */
  XDBC_DECIMAL = 3,

  /**
   * @generated from enum value: XDBC_INTEGER = 4;
   */
  XDBC_INTEGER = 4,

  /**
   * @generated from enum value: XDBC_SMALLINT = 5;
   */
  XDBC_SMALLINT = 5,

  /**
   * @generated from enum value: XDBC_FLOAT = 6;
   */
  XDBC_FLOAT = 6,

  /**
   * @generated from enum value: XDBC_REAL = 7;
   */
  XDBC_REAL = 7,

  /**
   * @generated from enum value: XDBC_DOUBLE = 8;
   */
  XDBC_DOUBLE = 8,

  /**
   * @generated from enum value: XDBC_DATETIME = 9;
   */
  XDBC_DATETIME = 9,

  /**
   * @generated from enum value: XDBC_INTERVAL = 10;
   */
  XDBC_INTERVAL = 10,

  /**
   * @generated from enum value: XDBC_VARCHAR = 12;
   */
  XDBC_VARCHAR = 12,

  /**
   * @generated from enum value: XDBC_DATE = 91;
   */
  XDBC_DATE = 91,

  /**
   * @generated from enum value: XDBC_TIME = 92;
   */
  XDBC_TIME = 92,

  /**
   * @generated from enum value: XDBC_TIMESTAMP = 93;
   */
  XDBC_TIMESTAMP = 93,

  /**
   * @generated from enum value: XDBC_LONGVARCHAR = -1;
   */
  XDBC_LONGVARCHAR = -1,

  /**
   * @generated from enum value: XDBC_BINARY = -2;
   */
  XDBC_BINARY = -2,

  /**
   * @generated from enum value: XDBC_VARBINARY = -3;
   */
  XDBC_VARBINARY = -3,

  /**
   * @generated from enum value: XDBC_LONGVARBINARY = -4;
   */
  XDBC_LONGVARBINARY = -4,

  /**
   * @generated from enum value: XDBC_BIGINT = -5;
   */
  XDBC_BIGINT = -5,

  /**
   * @generated from enum value: XDBC_TINYINT = -6;
   */
  XDBC_TINYINT = -6,

  /**
   * @generated from enum value: XDBC_BIT = -7;
   */
  XDBC_BIT = -7,

  /**
   * @generated from enum value: XDBC_WCHAR = -8;
   */
  XDBC_WCHAR = -8,

  /**
   * @generated from enum value: XDBC_WVARCHAR = -9;
   */
  XDBC_WVARCHAR = -9,
}
// Retrieve enum metadata with: proto3.getEnumType(XdbcDataType)
proto3.util.setEnumType(XdbcDataType, "arrow.flight.protocol.sql.XdbcDataType", [
  { no: 0, name: "XDBC_UNKNOWN_TYPE" },
  { no: 1, name: "XDBC_CHAR" },
  { no: 2, name: "XDBC_NUMERIC" },
  { no: 3, name: "XDBC_DECIMAL" },
  { no: 4, name: "XDBC_INTEGER" },
  { no: 5, name: "XDBC_SMALLINT" },
  { no: 6, name: "XDBC_FLOAT" },
  { no: 7, name: "XDBC_REAL" },
  { no: 8, name: "XDBC_DOUBLE" },
  { no: 9, name: "XDBC_DATETIME" },
  { no: 10, name: "XDBC_INTERVAL" },
  { no: 12, name: "XDBC_VARCHAR" },
  { no: 91, name: "XDBC_DATE" },
  { no: 92, name: "XDBC_TIME" },
  { no: 93, name: "XDBC_TIMESTAMP" },
  { no: -1, name: "XDBC_LONGVARCHAR" },
  { no: -2, name: "XDBC_BINARY" },
  { no: -3, name: "XDBC_VARBINARY" },
  { no: -4, name: "XDBC_LONGVARBINARY" },
  { no: -5, name: "XDBC_BIGINT" },
  { no: -6, name: "XDBC_TINYINT" },
  { no: -7, name: "XDBC_BIT" },
  { no: -8, name: "XDBC_WCHAR" },
  { no: -9, name: "XDBC_WVARCHAR" },
]);

/**
 * *
 * Detailed subtype information for XDBC_TYPE_DATETIME and XDBC_TYPE_INTERVAL.
 *
 * @generated from enum arrow.flight.protocol.sql.XdbcDatetimeSubcode
 */
export enum XdbcDatetimeSubcode {
  /**
   * @generated from enum value: XDBC_SUBCODE_UNKNOWN = 0;
   */
  XDBC_SUBCODE_UNKNOWN = 0,

  /**
   * @generated from enum value: XDBC_SUBCODE_YEAR = 1;
   */
  XDBC_SUBCODE_YEAR = 1,

  /**
   * @generated from enum value: XDBC_SUBCODE_DATE = 1;
   */
  XDBC_SUBCODE_DATE = 1,

  /**
   * @generated from enum value: XDBC_SUBCODE_TIME = 2;
   */
  XDBC_SUBCODE_TIME = 2,

  /**
   * @generated from enum value: XDBC_SUBCODE_MONTH = 2;
   */
  XDBC_SUBCODE_MONTH = 2,

  /**
   * @generated from enum value: XDBC_SUBCODE_TIMESTAMP = 3;
   */
  XDBC_SUBCODE_TIMESTAMP = 3,

  /**
   * @generated from enum value: XDBC_SUBCODE_DAY = 3;
   */
  XDBC_SUBCODE_DAY = 3,

  /**
   * @generated from enum value: XDBC_SUBCODE_TIME_WITH_TIMEZONE = 4;
   */
  XDBC_SUBCODE_TIME_WITH_TIMEZONE = 4,

  /**
   * @generated from enum value: XDBC_SUBCODE_HOUR = 4;
   */
  XDBC_SUBCODE_HOUR = 4,

  /**
   * @generated from enum value: XDBC_SUBCODE_TIMESTAMP_WITH_TIMEZONE = 5;
   */
  XDBC_SUBCODE_TIMESTAMP_WITH_TIMEZONE = 5,

  /**
   * @generated from enum value: XDBC_SUBCODE_MINUTE = 5;
   */
  XDBC_SUBCODE_MINUTE = 5,

  /**
   * @generated from enum value: XDBC_SUBCODE_SECOND = 6;
   */
  XDBC_SUBCODE_SECOND = 6,

  /**
   * @generated from enum value: XDBC_SUBCODE_YEAR_TO_MONTH = 7;
   */
  XDBC_SUBCODE_YEAR_TO_MONTH = 7,

  /**
   * @generated from enum value: XDBC_SUBCODE_DAY_TO_HOUR = 8;
   */
  XDBC_SUBCODE_DAY_TO_HOUR = 8,

  /**
   * @generated from enum value: XDBC_SUBCODE_DAY_TO_MINUTE = 9;
   */
  XDBC_SUBCODE_DAY_TO_MINUTE = 9,

  /**
   * @generated from enum value: XDBC_SUBCODE_DAY_TO_SECOND = 10;
   */
  XDBC_SUBCODE_DAY_TO_SECOND = 10,

  /**
   * @generated from enum value: XDBC_SUBCODE_HOUR_TO_MINUTE = 11;
   */
  XDBC_SUBCODE_HOUR_TO_MINUTE = 11,

  /**
   * @generated from enum value: XDBC_SUBCODE_HOUR_TO_SECOND = 12;
   */
  XDBC_SUBCODE_HOUR_TO_SECOND = 12,

  /**
   * @generated from enum value: XDBC_SUBCODE_MINUTE_TO_SECOND = 13;
   */
  XDBC_SUBCODE_MINUTE_TO_SECOND = 13,

  /**
   * @generated from enum value: XDBC_SUBCODE_INTERVAL_YEAR = 101;
   */
  XDBC_SUBCODE_INTERVAL_YEAR = 101,

  /**
   * @generated from enum value: XDBC_SUBCODE_INTERVAL_MONTH = 102;
   */
  XDBC_SUBCODE_INTERVAL_MONTH = 102,

  /**
   * @generated from enum value: XDBC_SUBCODE_INTERVAL_DAY = 103;
   */
  XDBC_SUBCODE_INTERVAL_DAY = 103,

  /**
   * @generated from enum value: XDBC_SUBCODE_INTERVAL_HOUR = 104;
   */
  XDBC_SUBCODE_INTERVAL_HOUR = 104,

  /**
   * @generated from enum value: XDBC_SUBCODE_INTERVAL_MINUTE = 105;
   */
  XDBC_SUBCODE_INTERVAL_MINUTE = 105,

  /**
   * @generated from enum value: XDBC_SUBCODE_INTERVAL_SECOND = 106;
   */
  XDBC_SUBCODE_INTERVAL_SECOND = 106,

  /**
   * @generated from enum value: XDBC_SUBCODE_INTERVAL_YEAR_TO_MONTH = 107;
   */
  XDBC_SUBCODE_INTERVAL_YEAR_TO_MONTH = 107,

  /**
   * @generated from enum value: XDBC_SUBCODE_INTERVAL_DAY_TO_HOUR = 108;
   */
  XDBC_SUBCODE_INTERVAL_DAY_TO_HOUR = 108,

  /**
   * @generated from enum value: XDBC_SUBCODE_INTERVAL_DAY_TO_MINUTE = 109;
   */
  XDBC_SUBCODE_INTERVAL_DAY_TO_MINUTE = 109,

  /**
   * @generated from enum value: XDBC_SUBCODE_INTERVAL_DAY_TO_SECOND = 110;
   */
  XDBC_SUBCODE_INTERVAL_DAY_TO_SECOND = 110,

  /**
   * @generated from enum value: XDBC_SUBCODE_INTERVAL_HOUR_TO_MINUTE = 111;
   */
  XDBC_SUBCODE_INTERVAL_HOUR_TO_MINUTE = 111,

  /**
   * @generated from enum value: XDBC_SUBCODE_INTERVAL_HOUR_TO_SECOND = 112;
   */
  XDBC_SUBCODE_INTERVAL_HOUR_TO_SECOND = 112,

  /**
   * @generated from enum value: XDBC_SUBCODE_INTERVAL_MINUTE_TO_SECOND = 113;
   */
  XDBC_SUBCODE_INTERVAL_MINUTE_TO_SECOND = 113,
}
// Retrieve enum metadata with: proto3.getEnumType(XdbcDatetimeSubcode)
proto3.util.setEnumType(XdbcDatetimeSubcode, "arrow.flight.protocol.sql.XdbcDatetimeSubcode", [
  { no: 0, name: "XDBC_SUBCODE_UNKNOWN" },
  { no: 1, name: "XDBC_SUBCODE_YEAR" },
  { no: 1, name: "XDBC_SUBCODE_DATE" },
  { no: 2, name: "XDBC_SUBCODE_TIME" },
  { no: 2, name: "XDBC_SUBCODE_MONTH" },
  { no: 3, name: "XDBC_SUBCODE_TIMESTAMP" },
  { no: 3, name: "XDBC_SUBCODE_DAY" },
  { no: 4, name: "XDBC_SUBCODE_TIME_WITH_TIMEZONE" },
  { no: 4, name: "XDBC_SUBCODE_HOUR" },
  { no: 5, name: "XDBC_SUBCODE_TIMESTAMP_WITH_TIMEZONE" },
  { no: 5, name: "XDBC_SUBCODE_MINUTE" },
  { no: 6, name: "XDBC_SUBCODE_SECOND" },
  { no: 7, name: "XDBC_SUBCODE_YEAR_TO_MONTH" },
  { no: 8, name: "XDBC_SUBCODE_DAY_TO_HOUR" },
  { no: 9, name: "XDBC_SUBCODE_DAY_TO_MINUTE" },
  { no: 10, name: "XDBC_SUBCODE_DAY_TO_SECOND" },
  { no: 11, name: "XDBC_SUBCODE_HOUR_TO_MINUTE" },
  { no: 12, name: "XDBC_SUBCODE_HOUR_TO_SECOND" },
  { no: 13, name: "XDBC_SUBCODE_MINUTE_TO_SECOND" },
  { no: 101, name: "XDBC_SUBCODE_INTERVAL_YEAR" },
  { no: 102, name: "XDBC_SUBCODE_INTERVAL_MONTH" },
  { no: 103, name: "XDBC_SUBCODE_INTERVAL_DAY" },
  { no: 104, name: "XDBC_SUBCODE_INTERVAL_HOUR" },
  { no: 105, name: "XDBC_SUBCODE_INTERVAL_MINUTE" },
  { no: 106, name: "XDBC_SUBCODE_INTERVAL_SECOND" },
  { no: 107, name: "XDBC_SUBCODE_INTERVAL_YEAR_TO_MONTH" },
  { no: 108, name: "XDBC_SUBCODE_INTERVAL_DAY_TO_HOUR" },
  { no: 109, name: "XDBC_SUBCODE_INTERVAL_DAY_TO_MINUTE" },
  { no: 110, name: "XDBC_SUBCODE_INTERVAL_DAY_TO_SECOND" },
  { no: 111, name: "XDBC_SUBCODE_INTERVAL_HOUR_TO_MINUTE" },
  { no: 112, name: "XDBC_SUBCODE_INTERVAL_HOUR_TO_SECOND" },
  { no: 113, name: "XDBC_SUBCODE_INTERVAL_MINUTE_TO_SECOND" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.Nullable
 */
export enum Nullable {
  /**
   * *
   * Indicates that the fields does not allow the use of null values.
   *
   * @generated from enum value: NULLABILITY_NO_NULLS = 0;
   */
  NULLABILITY_NO_NULLS = 0,

  /**
   * *
   * Indicates that the fields allow the use of null values.
   *
   * @generated from enum value: NULLABILITY_NULLABLE = 1;
   */
  NULLABILITY_NULLABLE = 1,

  /**
   * *
   * Indicates that nullability of the fields can not be determined.
   *
   * @generated from enum value: NULLABILITY_UNKNOWN = 2;
   */
  NULLABILITY_UNKNOWN = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Nullable)
proto3.util.setEnumType(Nullable, "arrow.flight.protocol.sql.Nullable", [
  { no: 0, name: "NULLABILITY_NO_NULLS" },
  { no: 1, name: "NULLABILITY_NULLABLE" },
  { no: 2, name: "NULLABILITY_UNKNOWN" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.Searchable
 */
export enum Searchable {
  /**
   * *
   * Indicates that column can not be used in a WHERE clause.
   *
   * @generated from enum value: SEARCHABLE_NONE = 0;
   */
  NONE = 0,

  /**
   * *
   * Indicates that the column can be used in a WHERE clause if it is using a
   * LIKE operator.
   *
   * @generated from enum value: SEARCHABLE_CHAR = 1;
   */
  CHAR = 1,

  /**
   * *
   * Indicates that the column can be used In a WHERE clause with any
   * operator other than LIKE.
   *
   * - Allowed operators: comparison, quantified comparison, BETWEEN,
   *                      DISTINCT, IN, MATCH, and UNIQUE.
   *
   * @generated from enum value: SEARCHABLE_BASIC = 2;
   */
  BASIC = 2,

  /**
   * *
   * Indicates that the column can be used in a WHERE clause using any operator.
   *
   * @generated from enum value: SEARCHABLE_FULL = 3;
   */
  FULL = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Searchable)
proto3.util.setEnumType(Searchable, "arrow.flight.protocol.sql.Searchable", [
  { no: 0, name: "SEARCHABLE_NONE" },
  { no: 1, name: "SEARCHABLE_CHAR" },
  { no: 2, name: "SEARCHABLE_BASIC" },
  { no: 3, name: "SEARCHABLE_FULL" },
]);

/**
 * @generated from enum arrow.flight.protocol.sql.UpdateDeleteRules
 */
export enum UpdateDeleteRules {
  /**
   * @generated from enum value: CASCADE = 0;
   */
  CASCADE = 0,

  /**
   * @generated from enum value: RESTRICT = 1;
   */
  RESTRICT = 1,

  /**
   * @generated from enum value: SET_NULL = 2;
   */
  SET_NULL = 2,

  /**
   * @generated from enum value: NO_ACTION = 3;
   */
  NO_ACTION = 3,

  /**
   * @generated from enum value: SET_DEFAULT = 4;
   */
  SET_DEFAULT = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(UpdateDeleteRules)
proto3.util.setEnumType(UpdateDeleteRules, "arrow.flight.protocol.sql.UpdateDeleteRules", [
  { no: 0, name: "CASCADE" },
  { no: 1, name: "RESTRICT" },
  { no: 2, name: "SET_NULL" },
  { no: 3, name: "NO_ACTION" },
  { no: 4, name: "SET_DEFAULT" },
]);

/**
 *
 * Represents a metadata request. Used in the command member of FlightDescriptor
 * for the following RPC calls:
 *  - GetSchema: return the Arrow schema of the query.
 *  - GetFlightInfo: execute the metadata request.
 *
 * The returned Arrow schema will be:
 * <
 *  info_name: uint32 not null,
 *  value: dense_union<
 *              string_value: utf8,
 *              bool_value: bool,
 *              bigint_value: int64,
 *              int32_bitmask: int32,
 *              string_list: list<string_data: utf8>
 *              int32_to_int32_list_map: map<key: int32, value: list<$data$: int32>>
 * >
 * where there is one row per requested piece of metadata information.
 *
 * @generated from message arrow.flight.protocol.sql.CommandGetSqlInfo
 */
export class CommandGetSqlInfo extends Message<CommandGetSqlInfo> {
  /**
   *
   * Values are modelled after ODBC's SQLGetInfo() function. This information is intended to provide
   * Flight SQL clients with basic, SQL syntax and SQL functions related information.
   * More information types can be added in future releases.
   * E.g. more SQL syntax support types, scalar functions support, type conversion support etc.
   *
   * Note that the set of metadata may expand.
   *
   * Initially, Flight SQL will support the following information types:
   * - Server Information - Range [0-500)
   * - Syntax Information - Range [500-1000)
   * Range [0-10,000) is reserved for defaults (see SqlInfo enum for default options).
   * Custom options should start at 10,000.
   *
   * If omitted, then all metadata will be retrieved.
   * Flight SQL Servers may choose to include additional metadata above and beyond the specified set, however they must
   * at least return the specified set. IDs ranging from 0 to 10,000 (exclusive) are reserved for future use.
   * If additional metadata is included, the metadata IDs should start from 10,000.
   *
   * @generated from field: repeated uint32 info = 1;
   */
  info: number[] = [];

  constructor(data?: PartialMessage<CommandGetSqlInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.CommandGetSqlInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandGetSqlInfo {
    return new CommandGetSqlInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandGetSqlInfo {
    return new CommandGetSqlInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandGetSqlInfo {
    return new CommandGetSqlInfo().fromJsonString(jsonString, options);
  }

  static equals(a: CommandGetSqlInfo | PlainMessage<CommandGetSqlInfo> | undefined, b: CommandGetSqlInfo | PlainMessage<CommandGetSqlInfo> | undefined): boolean {
    return proto3.util.equals(CommandGetSqlInfo, a, b);
  }
}

/**
 *
 * Represents a request to retrieve information about data type supported on a Flight SQL enabled backend.
 * Used in the command member of FlightDescriptor for the following RPC calls:
 *  - GetSchema: return the schema of the query.
 *  - GetFlightInfo: execute the catalog metadata request.
 *
 * The returned schema will be:
 * <
 *   type_name: utf8 not null (The name of the data type, for example: VARCHAR, INTEGER, etc),
 *   data_type: int32 not null (The SQL data type),
 *   column_size: int32 (The maximum size supported by that column.
 *                       In case of exact numeric types, this represents the maximum precision.
 *                       In case of string types, this represents the character length.
 *                       In case of datetime data types, this represents the length in characters of the string representation.
 *                       NULL is returned for data types where column size is not applicable.),
 *   literal_prefix: utf8 (Character or characters used to prefix a literal, NULL is returned for
 *                         data types where a literal prefix is not applicable.),
 *   literal_suffix: utf8 (Character or characters used to terminate a literal,
 *                         NULL is returned for data types where a literal suffix is not applicable.),
 *   create_params: list<utf8 not null>
 *                        (A list of keywords corresponding to which parameters can be used when creating
 *                         a column for that specific type.
 *                         NULL is returned if there are no parameters for the data type definition.),
 *   nullable: int32 not null (Shows if the data type accepts a NULL value. The possible values can be seen in the
 *                             Nullable enum.),
 *   case_sensitive: bool not null (Shows if a character data type is case-sensitive in collations and comparisons),
 *   searchable: int32 not null (Shows how the data type is used in a WHERE clause. The possible values can be seen in the
 *                               Searchable enum.),
 *   unsigned_attribute: bool (Shows if the data type is unsigned. NULL is returned if the attribute is
 *                             not applicable to the data type or the data type is not numeric.),
 *   fixed_prec_scale: bool not null (Shows if the data type has predefined fixed precision and scale.),
 *   auto_increment: bool (Shows if the data type is auto incremental. NULL is returned if the attribute
 *                         is not applicable to the data type or the data type is not numeric.),
 *   local_type_name: utf8 (Localized version of the data source-dependent name of the data type. NULL
 *                          is returned if a localized name is not supported by the data source),
 *   minimum_scale: int32 (The minimum scale of the data type on the data source.
 *                         If a data type has a fixed scale, the MINIMUM_SCALE and MAXIMUM_SCALE
 *                         columns both contain this value. NULL is returned if scale is not applicable.),
 *   maximum_scale: int32 (The maximum scale of the data type on the data source.
 *                         NULL is returned if scale is not applicable.),
 *   sql_data_type: int32 not null (The value of the SQL DATA TYPE which has the same values
 *                                  as data_type value. Except for interval and datetime, which
 *                                  uses generic values. More info about those types can be
 *                                  obtained through datetime_subcode. The possible values can be seen
 *                                  in the XdbcDataType enum.),
 *   datetime_subcode: int32 (Only used when the SQL DATA TYPE is interval or datetime. It contains
 *                            its sub types. For type different from interval and datetime, this value
 *                            is NULL. The possible values can be seen in the XdbcDatetimeSubcode enum.),
 *   num_prec_radix: int32 (If the data type is an approximate numeric type, this column contains
 *                          the value 2 to indicate that COLUMN_SIZE specifies a number of bits. For
 *                          exact numeric types, this column contains the value 10 to indicate that
 *                          column size specifies a number of decimal digits. Otherwise, this column is NULL.),
 *   interval_precision: int32 (If the data type is an interval data type, then this column contains the value
 *                              of the interval leading precision. Otherwise, this column is NULL. This fields
 *                              is only relevant to be used by ODBC).
 * >
 * The returned data should be ordered by data_type and then by type_name.
 *
 * @generated from message arrow.flight.protocol.sql.CommandGetXdbcTypeInfo
 */
export class CommandGetXdbcTypeInfo extends Message<CommandGetXdbcTypeInfo> {
  /**
   *
   * Specifies the data type to search for the info.
   *
   * @generated from field: optional int32 data_type = 1;
   */
  dataType?: number;

  constructor(data?: PartialMessage<CommandGetXdbcTypeInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.CommandGetXdbcTypeInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_type", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandGetXdbcTypeInfo {
    return new CommandGetXdbcTypeInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandGetXdbcTypeInfo {
    return new CommandGetXdbcTypeInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandGetXdbcTypeInfo {
    return new CommandGetXdbcTypeInfo().fromJsonString(jsonString, options);
  }

  static equals(a: CommandGetXdbcTypeInfo | PlainMessage<CommandGetXdbcTypeInfo> | undefined, b: CommandGetXdbcTypeInfo | PlainMessage<CommandGetXdbcTypeInfo> | undefined): boolean {
    return proto3.util.equals(CommandGetXdbcTypeInfo, a, b);
  }
}

/**
 *
 * Represents a request to retrieve the list of catalogs on a Flight SQL enabled backend.
 * The definition of a catalog depends on vendor/implementation. It is usually the database itself
 * Used in the command member of FlightDescriptor for the following RPC calls:
 *  - GetSchema: return the Arrow schema of the query.
 *  - GetFlightInfo: execute the catalog metadata request.
 *
 * The returned Arrow schema will be:
 * <
 *  catalog_name: utf8 not null
 * >
 * The returned data should be ordered by catalog_name.
 *
 * @generated from message arrow.flight.protocol.sql.CommandGetCatalogs
 */
export class CommandGetCatalogs extends Message<CommandGetCatalogs> {
  constructor(data?: PartialMessage<CommandGetCatalogs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.CommandGetCatalogs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandGetCatalogs {
    return new CommandGetCatalogs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandGetCatalogs {
    return new CommandGetCatalogs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandGetCatalogs {
    return new CommandGetCatalogs().fromJsonString(jsonString, options);
  }

  static equals(a: CommandGetCatalogs | PlainMessage<CommandGetCatalogs> | undefined, b: CommandGetCatalogs | PlainMessage<CommandGetCatalogs> | undefined): boolean {
    return proto3.util.equals(CommandGetCatalogs, a, b);
  }
}

/**
 *
 * Represents a request to retrieve the list of database schemas on a Flight SQL enabled backend.
 * The definition of a database schema depends on vendor/implementation. It is usually a collection of tables.
 * Used in the command member of FlightDescriptor for the following RPC calls:
 *  - GetSchema: return the Arrow schema of the query.
 *  - GetFlightInfo: execute the catalog metadata request.
 *
 * The returned Arrow schema will be:
 * <
 *  catalog_name: utf8,
 *  db_schema_name: utf8 not null
 * >
 * The returned data should be ordered by catalog_name, then db_schema_name.
 *
 * @generated from message arrow.flight.protocol.sql.CommandGetDbSchemas
 */
export class CommandGetDbSchemas extends Message<CommandGetDbSchemas> {
  /**
   *
   * Specifies the Catalog to search for the tables.
   * An empty string retrieves those without a catalog.
   * If omitted the catalog name should not be used to narrow the search.
   *
   * @generated from field: optional string catalog = 1;
   */
  catalog?: string;

  /**
   *
   * Specifies a filter pattern for schemas to search for.
   * When no db_schema_filter_pattern is provided, the pattern will not be used to narrow the search.
   * In the pattern string, two special characters can be used to denote matching rules:
   *    - "%" means to match any substring with 0 or more characters.
   *    - "_" means to match any one character.
   *
   * @generated from field: optional string db_schema_filter_pattern = 2;
   */
  dbSchemaFilterPattern?: string;

  constructor(data?: PartialMessage<CommandGetDbSchemas>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.CommandGetDbSchemas";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalog", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "db_schema_filter_pattern", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandGetDbSchemas {
    return new CommandGetDbSchemas().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandGetDbSchemas {
    return new CommandGetDbSchemas().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandGetDbSchemas {
    return new CommandGetDbSchemas().fromJsonString(jsonString, options);
  }

  static equals(a: CommandGetDbSchemas | PlainMessage<CommandGetDbSchemas> | undefined, b: CommandGetDbSchemas | PlainMessage<CommandGetDbSchemas> | undefined): boolean {
    return proto3.util.equals(CommandGetDbSchemas, a, b);
  }
}

/**
 *
 * Represents a request to retrieve the list of tables, and optionally their schemas, on a Flight SQL enabled backend.
 * Used in the command member of FlightDescriptor for the following RPC calls:
 *  - GetSchema: return the Arrow schema of the query.
 *  - GetFlightInfo: execute the catalog metadata request.
 *
 * The returned Arrow schema will be:
 * <
 *  catalog_name: utf8,
 *  db_schema_name: utf8,
 *  table_name: utf8 not null,
 *  table_type: utf8 not null,
 *  [optional] table_schema: bytes not null (schema of the table as described in Schema.fbs::Schema,
 *                                           it is serialized as an IPC message.)
 * >
 * Fields on table_schema may contain the following metadata:
 *  - ARROW:FLIGHT:SQL:CATALOG_NAME      - Table's catalog name
 *  - ARROW:FLIGHT:SQL:DB_SCHEMA_NAME    - Database schema name
 *  - ARROW:FLIGHT:SQL:TABLE_NAME        - Table name
 *  - ARROW:FLIGHT:SQL:TYPE_NAME         - The data source-specific name for the data type of the column.
 *  - ARROW:FLIGHT:SQL:PRECISION         - Column precision/size
 *  - ARROW:FLIGHT:SQL:SCALE             - Column scale/decimal digits if applicable
 *  - ARROW:FLIGHT:SQL:IS_AUTO_INCREMENT - "1" indicates if the column is auto incremented, "0" otherwise.
 *  - ARROW:FLIGHT:SQL:IS_CASE_SENSITIVE - "1" indicates if the column is case sensitive, "0" otherwise.
 *  - ARROW:FLIGHT:SQL:IS_READ_ONLY      - "1" indicates if the column is read only, "0" otherwise.
 *  - ARROW:FLIGHT:SQL:IS_SEARCHABLE     - "1" indicates if the column is searchable via WHERE clause, "0" otherwise.
 * The returned data should be ordered by catalog_name, db_schema_name, table_name, then table_type, followed by table_schema if requested.
 *
 * @generated from message arrow.flight.protocol.sql.CommandGetTables
 */
export class CommandGetTables extends Message<CommandGetTables> {
  /**
   *
   * Specifies the Catalog to search for the tables.
   * An empty string retrieves those without a catalog.
   * If omitted the catalog name should not be used to narrow the search.
   *
   * @generated from field: optional string catalog = 1;
   */
  catalog?: string;

  /**
   *
   * Specifies a filter pattern for schemas to search for.
   * When no db_schema_filter_pattern is provided, all schemas matching other filters are searched.
   * In the pattern string, two special characters can be used to denote matching rules:
   *    - "%" means to match any substring with 0 or more characters.
   *    - "_" means to match any one character.
   *
   * @generated from field: optional string db_schema_filter_pattern = 2;
   */
  dbSchemaFilterPattern?: string;

  /**
   *
   * Specifies a filter pattern for tables to search for.
   * When no table_name_filter_pattern is provided, all tables matching other filters are searched.
   * In the pattern string, two special characters can be used to denote matching rules:
   *    - "%" means to match any substring with 0 or more characters.
   *    - "_" means to match any one character.
   *
   * @generated from field: optional string table_name_filter_pattern = 3;
   */
  tableNameFilterPattern?: string;

  /**
   *
   * Specifies a filter of table types which must match.
   * The table types depend on vendor/implementation. It is usually used to separate tables from views or system tables.
   * TABLE, VIEW, and SYSTEM TABLE are commonly supported.
   *
   * @generated from field: repeated string table_types = 4;
   */
  tableTypes: string[] = [];

  /**
   * Specifies if the Arrow schema should be returned for found tables.
   *
   * @generated from field: bool include_schema = 5;
   */
  includeSchema = false;

  constructor(data?: PartialMessage<CommandGetTables>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.CommandGetTables";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalog", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "db_schema_filter_pattern", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "table_name_filter_pattern", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "table_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "include_schema", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandGetTables {
    return new CommandGetTables().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandGetTables {
    return new CommandGetTables().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandGetTables {
    return new CommandGetTables().fromJsonString(jsonString, options);
  }

  static equals(a: CommandGetTables | PlainMessage<CommandGetTables> | undefined, b: CommandGetTables | PlainMessage<CommandGetTables> | undefined): boolean {
    return proto3.util.equals(CommandGetTables, a, b);
  }
}

/**
 *
 * Represents a request to retrieve the list of table types on a Flight SQL enabled backend.
 * The table types depend on vendor/implementation. It is usually used to separate tables from views or system tables.
 * TABLE, VIEW, and SYSTEM TABLE are commonly supported.
 * Used in the command member of FlightDescriptor for the following RPC calls:
 *  - GetSchema: return the Arrow schema of the query.
 *  - GetFlightInfo: execute the catalog metadata request.
 *
 * The returned Arrow schema will be:
 * <
 *  table_type: utf8 not null
 * >
 * The returned data should be ordered by table_type.
 *
 * @generated from message arrow.flight.protocol.sql.CommandGetTableTypes
 */
export class CommandGetTableTypes extends Message<CommandGetTableTypes> {
  constructor(data?: PartialMessage<CommandGetTableTypes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.CommandGetTableTypes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandGetTableTypes {
    return new CommandGetTableTypes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandGetTableTypes {
    return new CommandGetTableTypes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandGetTableTypes {
    return new CommandGetTableTypes().fromJsonString(jsonString, options);
  }

  static equals(a: CommandGetTableTypes | PlainMessage<CommandGetTableTypes> | undefined, b: CommandGetTableTypes | PlainMessage<CommandGetTableTypes> | undefined): boolean {
    return proto3.util.equals(CommandGetTableTypes, a, b);
  }
}

/**
 *
 * Represents a request to retrieve the primary keys of a table on a Flight SQL enabled backend.
 * Used in the command member of FlightDescriptor for the following RPC calls:
 *  - GetSchema: return the Arrow schema of the query.
 *  - GetFlightInfo: execute the catalog metadata request.
 *
 * The returned Arrow schema will be:
 * <
 *  catalog_name: utf8,
 *  db_schema_name: utf8,
 *  table_name: utf8 not null,
 *  column_name: utf8 not null,
 *  key_name: utf8,
 *  key_sequence: int32 not null
 * >
 * The returned data should be ordered by catalog_name, db_schema_name, table_name, key_name, then key_sequence.
 *
 * @generated from message arrow.flight.protocol.sql.CommandGetPrimaryKeys
 */
export class CommandGetPrimaryKeys extends Message<CommandGetPrimaryKeys> {
  /**
   *
   * Specifies the catalog to search for the table.
   * An empty string retrieves those without a catalog.
   * If omitted the catalog name should not be used to narrow the search.
   *
   * @generated from field: optional string catalog = 1;
   */
  catalog?: string;

  /**
   *
   * Specifies the schema to search for the table.
   * An empty string retrieves those without a schema.
   * If omitted the schema name should not be used to narrow the search.
   *
   * @generated from field: optional string db_schema = 2;
   */
  dbSchema?: string;

  /**
   * Specifies the table to get the primary keys for.
   *
   * @generated from field: string table = 3;
   */
  table = "";

  constructor(data?: PartialMessage<CommandGetPrimaryKeys>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.CommandGetPrimaryKeys";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalog", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "db_schema", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandGetPrimaryKeys {
    return new CommandGetPrimaryKeys().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandGetPrimaryKeys {
    return new CommandGetPrimaryKeys().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandGetPrimaryKeys {
    return new CommandGetPrimaryKeys().fromJsonString(jsonString, options);
  }

  static equals(a: CommandGetPrimaryKeys | PlainMessage<CommandGetPrimaryKeys> | undefined, b: CommandGetPrimaryKeys | PlainMessage<CommandGetPrimaryKeys> | undefined): boolean {
    return proto3.util.equals(CommandGetPrimaryKeys, a, b);
  }
}

/**
 *
 * Represents a request to retrieve a description of the foreign key columns that reference the given table's
 * primary key columns (the foreign keys exported by a table) of a table on a Flight SQL enabled backend.
 * Used in the command member of FlightDescriptor for the following RPC calls:
 *  - GetSchema: return the Arrow schema of the query.
 *  - GetFlightInfo: execute the catalog metadata request.
 *
 * The returned Arrow schema will be:
 * <
 *  pk_catalog_name: utf8,
 *  pk_db_schema_name: utf8,
 *  pk_table_name: utf8 not null,
 *  pk_column_name: utf8 not null,
 *  fk_catalog_name: utf8,
 *  fk_db_schema_name: utf8,
 *  fk_table_name: utf8 not null,
 *  fk_column_name: utf8 not null,
 *  key_sequence: int32 not null,
 *  fk_key_name: utf8,
 *  pk_key_name: utf8,
 *  update_rule: uint8 not null,
 *  delete_rule: uint8 not null
 * >
 * The returned data should be ordered by fk_catalog_name, fk_db_schema_name, fk_table_name, fk_key_name, then key_sequence.
 * update_rule and delete_rule returns a byte that is equivalent to actions declared on UpdateDeleteRules enum.
 *
 * @generated from message arrow.flight.protocol.sql.CommandGetExportedKeys
 */
export class CommandGetExportedKeys extends Message<CommandGetExportedKeys> {
  /**
   *
   * Specifies the catalog to search for the foreign key table.
   * An empty string retrieves those without a catalog.
   * If omitted the catalog name should not be used to narrow the search.
   *
   * @generated from field: optional string catalog = 1;
   */
  catalog?: string;

  /**
   *
   * Specifies the schema to search for the foreign key table.
   * An empty string retrieves those without a schema.
   * If omitted the schema name should not be used to narrow the search.
   *
   * @generated from field: optional string db_schema = 2;
   */
  dbSchema?: string;

  /**
   * Specifies the foreign key table to get the foreign keys for.
   *
   * @generated from field: string table = 3;
   */
  table = "";

  constructor(data?: PartialMessage<CommandGetExportedKeys>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.CommandGetExportedKeys";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalog", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "db_schema", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandGetExportedKeys {
    return new CommandGetExportedKeys().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandGetExportedKeys {
    return new CommandGetExportedKeys().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandGetExportedKeys {
    return new CommandGetExportedKeys().fromJsonString(jsonString, options);
  }

  static equals(a: CommandGetExportedKeys | PlainMessage<CommandGetExportedKeys> | undefined, b: CommandGetExportedKeys | PlainMessage<CommandGetExportedKeys> | undefined): boolean {
    return proto3.util.equals(CommandGetExportedKeys, a, b);
  }
}

/**
 *
 * Represents a request to retrieve the foreign keys of a table on a Flight SQL enabled backend.
 * Used in the command member of FlightDescriptor for the following RPC calls:
 *  - GetSchema: return the Arrow schema of the query.
 *  - GetFlightInfo: execute the catalog metadata request.
 *
 * The returned Arrow schema will be:
 * <
 *  pk_catalog_name: utf8,
 *  pk_db_schema_name: utf8,
 *  pk_table_name: utf8 not null,
 *  pk_column_name: utf8 not null,
 *  fk_catalog_name: utf8,
 *  fk_db_schema_name: utf8,
 *  fk_table_name: utf8 not null,
 *  fk_column_name: utf8 not null,
 *  key_sequence: int32 not null,
 *  fk_key_name: utf8,
 *  pk_key_name: utf8,
 *  update_rule: uint8 not null,
 *  delete_rule: uint8 not null
 * >
 * The returned data should be ordered by pk_catalog_name, pk_db_schema_name, pk_table_name, pk_key_name, then key_sequence.
 * update_rule and delete_rule returns a byte that is equivalent to actions:
 *    - 0 = CASCADE
 *    - 1 = RESTRICT
 *    - 2 = SET NULL
 *    - 3 = NO ACTION
 *    - 4 = SET DEFAULT
 *
 * @generated from message arrow.flight.protocol.sql.CommandGetImportedKeys
 */
export class CommandGetImportedKeys extends Message<CommandGetImportedKeys> {
  /**
   *
   * Specifies the catalog to search for the primary key table.
   * An empty string retrieves those without a catalog.
   * If omitted the catalog name should not be used to narrow the search.
   *
   * @generated from field: optional string catalog = 1;
   */
  catalog?: string;

  /**
   *
   * Specifies the schema to search for the primary key table.
   * An empty string retrieves those without a schema.
   * If omitted the schema name should not be used to narrow the search.
   *
   * @generated from field: optional string db_schema = 2;
   */
  dbSchema?: string;

  /**
   * Specifies the primary key table to get the foreign keys for.
   *
   * @generated from field: string table = 3;
   */
  table = "";

  constructor(data?: PartialMessage<CommandGetImportedKeys>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.CommandGetImportedKeys";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalog", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "db_schema", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandGetImportedKeys {
    return new CommandGetImportedKeys().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandGetImportedKeys {
    return new CommandGetImportedKeys().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandGetImportedKeys {
    return new CommandGetImportedKeys().fromJsonString(jsonString, options);
  }

  static equals(a: CommandGetImportedKeys | PlainMessage<CommandGetImportedKeys> | undefined, b: CommandGetImportedKeys | PlainMessage<CommandGetImportedKeys> | undefined): boolean {
    return proto3.util.equals(CommandGetImportedKeys, a, b);
  }
}

/**
 *
 * Represents a request to retrieve a description of the foreign key columns in the given foreign key table that
 * reference the primary key or the columns representing a unique constraint of the parent table (could be the same
 * or a different table) on a Flight SQL enabled backend.
 * Used in the command member of FlightDescriptor for the following RPC calls:
 *  - GetSchema: return the Arrow schema of the query.
 *  - GetFlightInfo: execute the catalog metadata request.
 *
 * The returned Arrow schema will be:
 * <
 *  pk_catalog_name: utf8,
 *  pk_db_schema_name: utf8,
 *  pk_table_name: utf8 not null,
 *  pk_column_name: utf8 not null,
 *  fk_catalog_name: utf8,
 *  fk_db_schema_name: utf8,
 *  fk_table_name: utf8 not null,
 *  fk_column_name: utf8 not null,
 *  key_sequence: int32 not null,
 *  fk_key_name: utf8,
 *  pk_key_name: utf8,
 *  update_rule: uint8 not null,
 *  delete_rule: uint8 not null
 * >
 * The returned data should be ordered by pk_catalog_name, pk_db_schema_name, pk_table_name, pk_key_name, then key_sequence.
 * update_rule and delete_rule returns a byte that is equivalent to actions:
 *    - 0 = CASCADE
 *    - 1 = RESTRICT
 *    - 2 = SET NULL
 *    - 3 = NO ACTION
 *    - 4 = SET DEFAULT
 *
 * @generated from message arrow.flight.protocol.sql.CommandGetCrossReference
 */
export class CommandGetCrossReference extends Message<CommandGetCrossReference> {
  /**
   * *
   * The catalog name where the parent table is.
   * An empty string retrieves those without a catalog.
   * If omitted the catalog name should not be used to narrow the search.
   *
   * @generated from field: optional string pk_catalog = 1;
   */
  pkCatalog?: string;

  /**
   * *
   * The Schema name where the parent table is.
   * An empty string retrieves those without a schema.
   * If omitted the schema name should not be used to narrow the search.
   *
   * @generated from field: optional string pk_db_schema = 2;
   */
  pkDbSchema?: string;

  /**
   * *
   * The parent table name. It cannot be null.
   *
   * @generated from field: string pk_table = 3;
   */
  pkTable = "";

  /**
   * *
   * The catalog name where the foreign table is.
   * An empty string retrieves those without a catalog.
   * If omitted the catalog name should not be used to narrow the search.
   *
   * @generated from field: optional string fk_catalog = 4;
   */
  fkCatalog?: string;

  /**
   * *
   * The schema name where the foreign table is.
   * An empty string retrieves those without a schema.
   * If omitted the schema name should not be used to narrow the search.
   *
   * @generated from field: optional string fk_db_schema = 5;
   */
  fkDbSchema?: string;

  /**
   * *
   * The foreign table name. It cannot be null.
   *
   * @generated from field: string fk_table = 6;
   */
  fkTable = "";

  constructor(data?: PartialMessage<CommandGetCrossReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.CommandGetCrossReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pk_catalog", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "pk_db_schema", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "pk_table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "fk_catalog", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "fk_db_schema", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "fk_table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandGetCrossReference {
    return new CommandGetCrossReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandGetCrossReference {
    return new CommandGetCrossReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandGetCrossReference {
    return new CommandGetCrossReference().fromJsonString(jsonString, options);
  }

  static equals(a: CommandGetCrossReference | PlainMessage<CommandGetCrossReference> | undefined, b: CommandGetCrossReference | PlainMessage<CommandGetCrossReference> | undefined): boolean {
    return proto3.util.equals(CommandGetCrossReference, a, b);
  }
}

/**
 *
 * Request message for the "CreatePreparedStatement" action on a Flight SQL enabled backend.
 *
 * @generated from message arrow.flight.protocol.sql.ActionCreatePreparedStatementRequest
 */
export class ActionCreatePreparedStatementRequest extends Message<ActionCreatePreparedStatementRequest> {
  /**
   * The valid SQL string to create a prepared statement for.
   *
   * @generated from field: string query = 1;
   */
  query = "";

  /**
   * Create/execute the prepared statement as part of this transaction (if
   * unset, executions of the prepared statement will be auto-committed).
   *
   * @generated from field: optional bytes transaction_id = 2;
   */
  transactionId?: Uint8Array;

  constructor(data?: PartialMessage<ActionCreatePreparedStatementRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.ActionCreatePreparedStatementRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "transaction_id", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionCreatePreparedStatementRequest {
    return new ActionCreatePreparedStatementRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionCreatePreparedStatementRequest {
    return new ActionCreatePreparedStatementRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionCreatePreparedStatementRequest {
    return new ActionCreatePreparedStatementRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActionCreatePreparedStatementRequest | PlainMessage<ActionCreatePreparedStatementRequest> | undefined, b: ActionCreatePreparedStatementRequest | PlainMessage<ActionCreatePreparedStatementRequest> | undefined): boolean {
    return proto3.util.equals(ActionCreatePreparedStatementRequest, a, b);
  }
}

/**
 *
 * An embedded message describing a Substrait plan to execute.
 *
 * @generated from message arrow.flight.protocol.sql.SubstraitPlan
 */
export class SubstraitPlan extends Message<SubstraitPlan> {
  /**
   * The serialized substrait.Plan to create a prepared statement for.
   * XXX(ARROW-16902): this is bytes instead of an embedded message
   * because Protobuf does not really support one DLL using Protobuf
   * definitions from another DLL.
   *
   * @generated from field: bytes plan = 1;
   */
  plan = new Uint8Array(0);

  /**
   * The Substrait release, e.g. "0.12.0". This information is not
   * tracked in the plan itself, so this is the only way for consumers
   * to potentially know if they can handle the plan.
   *
   * @generated from field: string version = 2;
   */
  version = "";

  constructor(data?: PartialMessage<SubstraitPlan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.SubstraitPlan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plan", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstraitPlan {
    return new SubstraitPlan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstraitPlan {
    return new SubstraitPlan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstraitPlan {
    return new SubstraitPlan().fromJsonString(jsonString, options);
  }

  static equals(a: SubstraitPlan | PlainMessage<SubstraitPlan> | undefined, b: SubstraitPlan | PlainMessage<SubstraitPlan> | undefined): boolean {
    return proto3.util.equals(SubstraitPlan, a, b);
  }
}

/**
 *
 * Request message for the "CreatePreparedSubstraitPlan" action on a Flight SQL enabled backend.
 *
 * @generated from message arrow.flight.protocol.sql.ActionCreatePreparedSubstraitPlanRequest
 */
export class ActionCreatePreparedSubstraitPlanRequest extends Message<ActionCreatePreparedSubstraitPlanRequest> {
  /**
   * The serialized substrait.Plan to create a prepared statement for.
   *
   * @generated from field: arrow.flight.protocol.sql.SubstraitPlan plan = 1;
   */
  plan?: SubstraitPlan;

  /**
   * Create/execute the prepared statement as part of this transaction (if
   * unset, executions of the prepared statement will be auto-committed).
   *
   * @generated from field: optional bytes transaction_id = 2;
   */
  transactionId?: Uint8Array;

  constructor(data?: PartialMessage<ActionCreatePreparedSubstraitPlanRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.ActionCreatePreparedSubstraitPlanRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plan", kind: "message", T: SubstraitPlan },
    { no: 2, name: "transaction_id", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionCreatePreparedSubstraitPlanRequest {
    return new ActionCreatePreparedSubstraitPlanRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionCreatePreparedSubstraitPlanRequest {
    return new ActionCreatePreparedSubstraitPlanRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionCreatePreparedSubstraitPlanRequest {
    return new ActionCreatePreparedSubstraitPlanRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActionCreatePreparedSubstraitPlanRequest | PlainMessage<ActionCreatePreparedSubstraitPlanRequest> | undefined, b: ActionCreatePreparedSubstraitPlanRequest | PlainMessage<ActionCreatePreparedSubstraitPlanRequest> | undefined): boolean {
    return proto3.util.equals(ActionCreatePreparedSubstraitPlanRequest, a, b);
  }
}

/**
 *
 * Wrap the result of a "CreatePreparedStatement" or "CreatePreparedSubstraitPlan" action.
 *
 * The resultant PreparedStatement can be closed either:
 * - Manually, through the "ClosePreparedStatement" action;
 * - Automatically, by a server timeout.
 *
 * The result should be wrapped in a google.protobuf.Any message.
 *
 * @generated from message arrow.flight.protocol.sql.ActionCreatePreparedStatementResult
 */
export class ActionCreatePreparedStatementResult extends Message<ActionCreatePreparedStatementResult> {
  /**
   * Opaque handle for the prepared statement on the server.
   *
   * @generated from field: bytes prepared_statement_handle = 1;
   */
  preparedStatementHandle = new Uint8Array(0);

  /**
   * If a result set generating query was provided, dataset_schema contains the
   * schema of the dataset as described in Schema.fbs::Schema, it is serialized as an IPC message.
   *
   * @generated from field: bytes dataset_schema = 2;
   */
  datasetSchema = new Uint8Array(0);

  /**
   * If the query provided contained parameters, parameter_schema contains the
   * schema of the expected parameters as described in Schema.fbs::Schema, it is serialized as an IPC message.
   *
   * @generated from field: bytes parameter_schema = 3;
   */
  parameterSchema = new Uint8Array(0);

  constructor(data?: PartialMessage<ActionCreatePreparedStatementResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.ActionCreatePreparedStatementResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prepared_statement_handle", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "dataset_schema", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "parameter_schema", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionCreatePreparedStatementResult {
    return new ActionCreatePreparedStatementResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionCreatePreparedStatementResult {
    return new ActionCreatePreparedStatementResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionCreatePreparedStatementResult {
    return new ActionCreatePreparedStatementResult().fromJsonString(jsonString, options);
  }

  static equals(a: ActionCreatePreparedStatementResult | PlainMessage<ActionCreatePreparedStatementResult> | undefined, b: ActionCreatePreparedStatementResult | PlainMessage<ActionCreatePreparedStatementResult> | undefined): boolean {
    return proto3.util.equals(ActionCreatePreparedStatementResult, a, b);
  }
}

/**
 *
 * Request message for the "ClosePreparedStatement" action on a Flight SQL enabled backend.
 * Closes server resources associated with the prepared statement handle.
 *
 * @generated from message arrow.flight.protocol.sql.ActionClosePreparedStatementRequest
 */
export class ActionClosePreparedStatementRequest extends Message<ActionClosePreparedStatementRequest> {
  /**
   * Opaque handle for the prepared statement on the server.
   *
   * @generated from field: bytes prepared_statement_handle = 1;
   */
  preparedStatementHandle = new Uint8Array(0);

  constructor(data?: PartialMessage<ActionClosePreparedStatementRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.ActionClosePreparedStatementRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prepared_statement_handle", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionClosePreparedStatementRequest {
    return new ActionClosePreparedStatementRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionClosePreparedStatementRequest {
    return new ActionClosePreparedStatementRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionClosePreparedStatementRequest {
    return new ActionClosePreparedStatementRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActionClosePreparedStatementRequest | PlainMessage<ActionClosePreparedStatementRequest> | undefined, b: ActionClosePreparedStatementRequest | PlainMessage<ActionClosePreparedStatementRequest> | undefined): boolean {
    return proto3.util.equals(ActionClosePreparedStatementRequest, a, b);
  }
}

/**
 *
 * Request message for the "BeginTransaction" action.
 * Begins a transaction.
 *
 * @generated from message arrow.flight.protocol.sql.ActionBeginTransactionRequest
 */
export class ActionBeginTransactionRequest extends Message<ActionBeginTransactionRequest> {
  constructor(data?: PartialMessage<ActionBeginTransactionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.ActionBeginTransactionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionBeginTransactionRequest {
    return new ActionBeginTransactionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionBeginTransactionRequest {
    return new ActionBeginTransactionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionBeginTransactionRequest {
    return new ActionBeginTransactionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActionBeginTransactionRequest | PlainMessage<ActionBeginTransactionRequest> | undefined, b: ActionBeginTransactionRequest | PlainMessage<ActionBeginTransactionRequest> | undefined): boolean {
    return proto3.util.equals(ActionBeginTransactionRequest, a, b);
  }
}

/**
 *
 * Request message for the "BeginSavepoint" action.
 * Creates a savepoint within a transaction.
 *
 * Only supported if FLIGHT_SQL_TRANSACTION is
 * FLIGHT_SQL_TRANSACTION_SUPPORT_SAVEPOINT.
 *
 * @generated from message arrow.flight.protocol.sql.ActionBeginSavepointRequest
 */
export class ActionBeginSavepointRequest extends Message<ActionBeginSavepointRequest> {
  /**
   * The transaction to which a savepoint belongs.
   *
   * @generated from field: bytes transaction_id = 1;
   */
  transactionId = new Uint8Array(0);

  /**
   * Name for the savepoint.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<ActionBeginSavepointRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.ActionBeginSavepointRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionBeginSavepointRequest {
    return new ActionBeginSavepointRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionBeginSavepointRequest {
    return new ActionBeginSavepointRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionBeginSavepointRequest {
    return new ActionBeginSavepointRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActionBeginSavepointRequest | PlainMessage<ActionBeginSavepointRequest> | undefined, b: ActionBeginSavepointRequest | PlainMessage<ActionBeginSavepointRequest> | undefined): boolean {
    return proto3.util.equals(ActionBeginSavepointRequest, a, b);
  }
}

/**
 *
 * The result of a "BeginTransaction" action.
 *
 * The transaction can be manipulated with the "EndTransaction" action, or
 * automatically via server timeout. If the transaction times out, then it is
 * automatically rolled back.
 *
 * The result should be wrapped in a google.protobuf.Any message.
 *
 * @generated from message arrow.flight.protocol.sql.ActionBeginTransactionResult
 */
export class ActionBeginTransactionResult extends Message<ActionBeginTransactionResult> {
  /**
   * Opaque handle for the transaction on the server.
   *
   * @generated from field: bytes transaction_id = 1;
   */
  transactionId = new Uint8Array(0);

  constructor(data?: PartialMessage<ActionBeginTransactionResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.ActionBeginTransactionResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionBeginTransactionResult {
    return new ActionBeginTransactionResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionBeginTransactionResult {
    return new ActionBeginTransactionResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionBeginTransactionResult {
    return new ActionBeginTransactionResult().fromJsonString(jsonString, options);
  }

  static equals(a: ActionBeginTransactionResult | PlainMessage<ActionBeginTransactionResult> | undefined, b: ActionBeginTransactionResult | PlainMessage<ActionBeginTransactionResult> | undefined): boolean {
    return proto3.util.equals(ActionBeginTransactionResult, a, b);
  }
}

/**
 *
 * The result of a "BeginSavepoint" action.
 *
 * The transaction can be manipulated with the "EndSavepoint" action.
 * If the associated transaction is committed, rolled back, or times
 * out, then the savepoint is also invalidated.
 *
 * The result should be wrapped in a google.protobuf.Any message.
 *
 * @generated from message arrow.flight.protocol.sql.ActionBeginSavepointResult
 */
export class ActionBeginSavepointResult extends Message<ActionBeginSavepointResult> {
  /**
   * Opaque handle for the savepoint on the server.
   *
   * @generated from field: bytes savepoint_id = 1;
   */
  savepointId = new Uint8Array(0);

  constructor(data?: PartialMessage<ActionBeginSavepointResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.ActionBeginSavepointResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "savepoint_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionBeginSavepointResult {
    return new ActionBeginSavepointResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionBeginSavepointResult {
    return new ActionBeginSavepointResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionBeginSavepointResult {
    return new ActionBeginSavepointResult().fromJsonString(jsonString, options);
  }

  static equals(a: ActionBeginSavepointResult | PlainMessage<ActionBeginSavepointResult> | undefined, b: ActionBeginSavepointResult | PlainMessage<ActionBeginSavepointResult> | undefined): boolean {
    return proto3.util.equals(ActionBeginSavepointResult, a, b);
  }
}

/**
 *
 * Request message for the "EndTransaction" action.
 *
 * Commit (COMMIT) or rollback (ROLLBACK) the transaction.
 *
 * If the action completes successfully, the transaction handle is
 * invalidated, as are all associated savepoints.
 *
 * @generated from message arrow.flight.protocol.sql.ActionEndTransactionRequest
 */
export class ActionEndTransactionRequest extends Message<ActionEndTransactionRequest> {
  /**
   * Opaque handle for the transaction on the server.
   *
   * @generated from field: bytes transaction_id = 1;
   */
  transactionId = new Uint8Array(0);

  /**
   * Whether to commit/rollback the given transaction.
   *
   * @generated from field: arrow.flight.protocol.sql.ActionEndTransactionRequest.EndTransaction action = 2;
   */
  action = ActionEndTransactionRequest_EndTransaction.UNSPECIFIED;

  constructor(data?: PartialMessage<ActionEndTransactionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.ActionEndTransactionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "action", kind: "enum", T: proto3.getEnumType(ActionEndTransactionRequest_EndTransaction) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionEndTransactionRequest {
    return new ActionEndTransactionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionEndTransactionRequest {
    return new ActionEndTransactionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionEndTransactionRequest {
    return new ActionEndTransactionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActionEndTransactionRequest | PlainMessage<ActionEndTransactionRequest> | undefined, b: ActionEndTransactionRequest | PlainMessage<ActionEndTransactionRequest> | undefined): boolean {
    return proto3.util.equals(ActionEndTransactionRequest, a, b);
  }
}

/**
 * @generated from enum arrow.flight.protocol.sql.ActionEndTransactionRequest.EndTransaction
 */
export enum ActionEndTransactionRequest_EndTransaction {
  /**
   * @generated from enum value: END_TRANSACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Commit the transaction.
   *
   * @generated from enum value: END_TRANSACTION_COMMIT = 1;
   */
  COMMIT = 1,

  /**
   * Roll back the transaction.
   *
   * @generated from enum value: END_TRANSACTION_ROLLBACK = 2;
   */
  ROLLBACK = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ActionEndTransactionRequest_EndTransaction)
proto3.util.setEnumType(ActionEndTransactionRequest_EndTransaction, "arrow.flight.protocol.sql.ActionEndTransactionRequest.EndTransaction", [
  { no: 0, name: "END_TRANSACTION_UNSPECIFIED" },
  { no: 1, name: "END_TRANSACTION_COMMIT" },
  { no: 2, name: "END_TRANSACTION_ROLLBACK" },
]);

/**
 *
 * Request message for the "EndSavepoint" action.
 *
 * Release (RELEASE) the savepoint or rollback (ROLLBACK) to the
 * savepoint.
 *
 * Releasing a savepoint invalidates that savepoint.  Rolling back to
 * a savepoint does not invalidate the savepoint, but invalidates all
 * savepoints created after the current savepoint.
 *
 * @generated from message arrow.flight.protocol.sql.ActionEndSavepointRequest
 */
export class ActionEndSavepointRequest extends Message<ActionEndSavepointRequest> {
  /**
   * Opaque handle for the savepoint on the server.
   *
   * @generated from field: bytes savepoint_id = 1;
   */
  savepointId = new Uint8Array(0);

  /**
   * Whether to rollback/release the given savepoint.
   *
   * @generated from field: arrow.flight.protocol.sql.ActionEndSavepointRequest.EndSavepoint action = 2;
   */
  action = ActionEndSavepointRequest_EndSavepoint.UNSPECIFIED;

  constructor(data?: PartialMessage<ActionEndSavepointRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.ActionEndSavepointRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "savepoint_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "action", kind: "enum", T: proto3.getEnumType(ActionEndSavepointRequest_EndSavepoint) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionEndSavepointRequest {
    return new ActionEndSavepointRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionEndSavepointRequest {
    return new ActionEndSavepointRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionEndSavepointRequest {
    return new ActionEndSavepointRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActionEndSavepointRequest | PlainMessage<ActionEndSavepointRequest> | undefined, b: ActionEndSavepointRequest | PlainMessage<ActionEndSavepointRequest> | undefined): boolean {
    return proto3.util.equals(ActionEndSavepointRequest, a, b);
  }
}

/**
 * @generated from enum arrow.flight.protocol.sql.ActionEndSavepointRequest.EndSavepoint
 */
export enum ActionEndSavepointRequest_EndSavepoint {
  /**
   * @generated from enum value: END_SAVEPOINT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Release the savepoint.
   *
   * @generated from enum value: END_SAVEPOINT_RELEASE = 1;
   */
  RELEASE = 1,

  /**
   * Roll back to a savepoint.
   *
   * @generated from enum value: END_SAVEPOINT_ROLLBACK = 2;
   */
  ROLLBACK = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ActionEndSavepointRequest_EndSavepoint)
proto3.util.setEnumType(ActionEndSavepointRequest_EndSavepoint, "arrow.flight.protocol.sql.ActionEndSavepointRequest.EndSavepoint", [
  { no: 0, name: "END_SAVEPOINT_UNSPECIFIED" },
  { no: 1, name: "END_SAVEPOINT_RELEASE" },
  { no: 2, name: "END_SAVEPOINT_ROLLBACK" },
]);

/**
 *
 * Represents a SQL query. Used in the command member of FlightDescriptor
 * for the following RPC calls:
 *  - GetSchema: return the Arrow schema of the query.
 *    Fields on this schema may contain the following metadata:
 *    - ARROW:FLIGHT:SQL:CATALOG_NAME      - Table's catalog name
 *    - ARROW:FLIGHT:SQL:DB_SCHEMA_NAME    - Database schema name
 *    - ARROW:FLIGHT:SQL:TABLE_NAME        - Table name
 *    - ARROW:FLIGHT:SQL:TYPE_NAME         - The data source-specific name for the data type of the column.
 *    - ARROW:FLIGHT:SQL:PRECISION         - Column precision/size
 *    - ARROW:FLIGHT:SQL:SCALE             - Column scale/decimal digits if applicable
 *    - ARROW:FLIGHT:SQL:IS_AUTO_INCREMENT - "1" indicates if the column is auto incremented, "0" otherwise.
 *    - ARROW:FLIGHT:SQL:IS_CASE_SENSITIVE - "1" indicates if the column is case sensitive, "0" otherwise.
 *    - ARROW:FLIGHT:SQL:IS_READ_ONLY      - "1" indicates if the column is read only, "0" otherwise.
 *    - ARROW:FLIGHT:SQL:IS_SEARCHABLE     - "1" indicates if the column is searchable via WHERE clause, "0" otherwise.
 *  - GetFlightInfo: execute the query.
 *
 * @generated from message arrow.flight.protocol.sql.CommandStatementQuery
 */
export class CommandStatementQuery extends Message<CommandStatementQuery> {
  /**
   * The SQL syntax.
   *
   * @generated from field: string query = 1;
   */
  query = "";

  /**
   * Include the query as part of this transaction (if unset, the query is auto-committed).
   *
   * @generated from field: optional bytes transaction_id = 2;
   */
  transactionId?: Uint8Array;

  constructor(data?: PartialMessage<CommandStatementQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.CommandStatementQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "transaction_id", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandStatementQuery {
    return new CommandStatementQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandStatementQuery {
    return new CommandStatementQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandStatementQuery {
    return new CommandStatementQuery().fromJsonString(jsonString, options);
  }

  static equals(a: CommandStatementQuery | PlainMessage<CommandStatementQuery> | undefined, b: CommandStatementQuery | PlainMessage<CommandStatementQuery> | undefined): boolean {
    return proto3.util.equals(CommandStatementQuery, a, b);
  }
}

/**
 *
 * Represents a Substrait plan. Used in the command member of FlightDescriptor
 * for the following RPC calls:
 *  - GetSchema: return the Arrow schema of the query.
 *    Fields on this schema may contain the following metadata:
 *    - ARROW:FLIGHT:SQL:CATALOG_NAME      - Table's catalog name
 *    - ARROW:FLIGHT:SQL:DB_SCHEMA_NAME    - Database schema name
 *    - ARROW:FLIGHT:SQL:TABLE_NAME        - Table name
 *    - ARROW:FLIGHT:SQL:TYPE_NAME         - The data source-specific name for the data type of the column.
 *    - ARROW:FLIGHT:SQL:PRECISION         - Column precision/size
 *    - ARROW:FLIGHT:SQL:SCALE             - Column scale/decimal digits if applicable
 *    - ARROW:FLIGHT:SQL:IS_AUTO_INCREMENT - "1" indicates if the column is auto incremented, "0" otherwise.
 *    - ARROW:FLIGHT:SQL:IS_CASE_SENSITIVE - "1" indicates if the column is case sensitive, "0" otherwise.
 *    - ARROW:FLIGHT:SQL:IS_READ_ONLY      - "1" indicates if the column is read only, "0" otherwise.
 *    - ARROW:FLIGHT:SQL:IS_SEARCHABLE     - "1" indicates if the column is searchable via WHERE clause, "0" otherwise.
 *  - GetFlightInfo: execute the query.
 *  - DoPut: execute the query.
 *
 * @generated from message arrow.flight.protocol.sql.CommandStatementSubstraitPlan
 */
export class CommandStatementSubstraitPlan extends Message<CommandStatementSubstraitPlan> {
  /**
   * A serialized substrait.Plan
   *
   * @generated from field: arrow.flight.protocol.sql.SubstraitPlan plan = 1;
   */
  plan?: SubstraitPlan;

  /**
   * Include the query as part of this transaction (if unset, the query is auto-committed).
   *
   * @generated from field: optional bytes transaction_id = 2;
   */
  transactionId?: Uint8Array;

  constructor(data?: PartialMessage<CommandStatementSubstraitPlan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.CommandStatementSubstraitPlan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plan", kind: "message", T: SubstraitPlan },
    { no: 2, name: "transaction_id", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandStatementSubstraitPlan {
    return new CommandStatementSubstraitPlan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandStatementSubstraitPlan {
    return new CommandStatementSubstraitPlan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandStatementSubstraitPlan {
    return new CommandStatementSubstraitPlan().fromJsonString(jsonString, options);
  }

  static equals(a: CommandStatementSubstraitPlan | PlainMessage<CommandStatementSubstraitPlan> | undefined, b: CommandStatementSubstraitPlan | PlainMessage<CommandStatementSubstraitPlan> | undefined): boolean {
    return proto3.util.equals(CommandStatementSubstraitPlan, a, b);
  }
}

/**
 * *
 * Represents a ticket resulting from GetFlightInfo with a CommandStatementQuery.
 * This should be used only once and treated as an opaque value, that is, clients should not attempt to parse this.
 *
 * @generated from message arrow.flight.protocol.sql.TicketStatementQuery
 */
export class TicketStatementQuery extends Message<TicketStatementQuery> {
  /**
   * Unique identifier for the instance of the statement to execute.
   *
   * @generated from field: bytes statement_handle = 1;
   */
  statementHandle = new Uint8Array(0);

  constructor(data?: PartialMessage<TicketStatementQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.TicketStatementQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "statement_handle", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TicketStatementQuery {
    return new TicketStatementQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TicketStatementQuery {
    return new TicketStatementQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TicketStatementQuery {
    return new TicketStatementQuery().fromJsonString(jsonString, options);
  }

  static equals(a: TicketStatementQuery | PlainMessage<TicketStatementQuery> | undefined, b: TicketStatementQuery | PlainMessage<TicketStatementQuery> | undefined): boolean {
    return proto3.util.equals(TicketStatementQuery, a, b);
  }
}

/**
 *
 * Represents an instance of executing a prepared statement. Used in the command member of FlightDescriptor for
 * the following RPC calls:
 *  - GetSchema: return the Arrow schema of the query.
 *    Fields on this schema may contain the following metadata:
 *    - ARROW:FLIGHT:SQL:CATALOG_NAME      - Table's catalog name
 *    - ARROW:FLIGHT:SQL:DB_SCHEMA_NAME    - Database schema name
 *    - ARROW:FLIGHT:SQL:TABLE_NAME        - Table name
 *    - ARROW:FLIGHT:SQL:TYPE_NAME         - The data source-specific name for the data type of the column.
 *    - ARROW:FLIGHT:SQL:PRECISION         - Column precision/size
 *    - ARROW:FLIGHT:SQL:SCALE             - Column scale/decimal digits if applicable
 *    - ARROW:FLIGHT:SQL:IS_AUTO_INCREMENT - "1" indicates if the column is auto incremented, "0" otherwise.
 *    - ARROW:FLIGHT:SQL:IS_CASE_SENSITIVE - "1" indicates if the column is case sensitive, "0" otherwise.
 *    - ARROW:FLIGHT:SQL:IS_READ_ONLY      - "1" indicates if the column is read only, "0" otherwise.
 *    - ARROW:FLIGHT:SQL:IS_SEARCHABLE     - "1" indicates if the column is searchable via WHERE clause, "0" otherwise.
 *  - DoPut: bind parameter values. All of the bound parameter sets will be executed as a single atomic execution.
 *  - GetFlightInfo: execute the prepared statement instance.
 *
 * @generated from message arrow.flight.protocol.sql.CommandPreparedStatementQuery
 */
export class CommandPreparedStatementQuery extends Message<CommandPreparedStatementQuery> {
  /**
   * Opaque handle for the prepared statement on the server.
   *
   * @generated from field: bytes prepared_statement_handle = 1;
   */
  preparedStatementHandle = new Uint8Array(0);

  constructor(data?: PartialMessage<CommandPreparedStatementQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.CommandPreparedStatementQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prepared_statement_handle", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandPreparedStatementQuery {
    return new CommandPreparedStatementQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandPreparedStatementQuery {
    return new CommandPreparedStatementQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandPreparedStatementQuery {
    return new CommandPreparedStatementQuery().fromJsonString(jsonString, options);
  }

  static equals(a: CommandPreparedStatementQuery | PlainMessage<CommandPreparedStatementQuery> | undefined, b: CommandPreparedStatementQuery | PlainMessage<CommandPreparedStatementQuery> | undefined): boolean {
    return proto3.util.equals(CommandPreparedStatementQuery, a, b);
  }
}

/**
 *
 * Represents a SQL update query. Used in the command member of FlightDescriptor
 * for the the RPC call DoPut to cause the server to execute the included SQL update.
 *
 * @generated from message arrow.flight.protocol.sql.CommandStatementUpdate
 */
export class CommandStatementUpdate extends Message<CommandStatementUpdate> {
  /**
   * The SQL syntax.
   *
   * @generated from field: string query = 1;
   */
  query = "";

  /**
   * Include the query as part of this transaction (if unset, the query is auto-committed).
   *
   * @generated from field: optional bytes transaction_id = 2;
   */
  transactionId?: Uint8Array;

  constructor(data?: PartialMessage<CommandStatementUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.CommandStatementUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "transaction_id", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandStatementUpdate {
    return new CommandStatementUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandStatementUpdate {
    return new CommandStatementUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandStatementUpdate {
    return new CommandStatementUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: CommandStatementUpdate | PlainMessage<CommandStatementUpdate> | undefined, b: CommandStatementUpdate | PlainMessage<CommandStatementUpdate> | undefined): boolean {
    return proto3.util.equals(CommandStatementUpdate, a, b);
  }
}

/**
 *
 * Represents a SQL update query. Used in the command member of FlightDescriptor
 * for the the RPC call DoPut to cause the server to execute the included
 * prepared statement handle as an update.
 *
 * @generated from message arrow.flight.protocol.sql.CommandPreparedStatementUpdate
 */
export class CommandPreparedStatementUpdate extends Message<CommandPreparedStatementUpdate> {
  /**
   * Opaque handle for the prepared statement on the server.
   *
   * @generated from field: bytes prepared_statement_handle = 1;
   */
  preparedStatementHandle = new Uint8Array(0);

  constructor(data?: PartialMessage<CommandPreparedStatementUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.CommandPreparedStatementUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prepared_statement_handle", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandPreparedStatementUpdate {
    return new CommandPreparedStatementUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandPreparedStatementUpdate {
    return new CommandPreparedStatementUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandPreparedStatementUpdate {
    return new CommandPreparedStatementUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: CommandPreparedStatementUpdate | PlainMessage<CommandPreparedStatementUpdate> | undefined, b: CommandPreparedStatementUpdate | PlainMessage<CommandPreparedStatementUpdate> | undefined): boolean {
    return proto3.util.equals(CommandPreparedStatementUpdate, a, b);
  }
}

/**
 *
 * Returned from the RPC call DoPut when a CommandStatementUpdate
 * CommandPreparedStatementUpdate was in the request, containing
 * results from the update.
 *
 * @generated from message arrow.flight.protocol.sql.DoPutUpdateResult
 */
export class DoPutUpdateResult extends Message<DoPutUpdateResult> {
  /**
   * The number of records updated. A return value of -1 represents
   * an unknown updated record count.
   *
   * @generated from field: int64 record_count = 1;
   */
  recordCount = protoInt64.zero;

  constructor(data?: PartialMessage<DoPutUpdateResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.DoPutUpdateResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DoPutUpdateResult {
    return new DoPutUpdateResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DoPutUpdateResult {
    return new DoPutUpdateResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DoPutUpdateResult {
    return new DoPutUpdateResult().fromJsonString(jsonString, options);
  }

  static equals(a: DoPutUpdateResult | PlainMessage<DoPutUpdateResult> | undefined, b: DoPutUpdateResult | PlainMessage<DoPutUpdateResult> | undefined): boolean {
    return proto3.util.equals(DoPutUpdateResult, a, b);
  }
}

/**
 *
 * Request message for the "CancelQuery" action.
 *
 * Explicitly cancel a running query.
 *
 * This lets a single client explicitly cancel work, no matter how many clients
 * are involved/whether the query is distributed or not, given server support.
 * The transaction/statement is not rolled back; it is the application's job to
 * commit or rollback as appropriate. This only indicates the client no longer
 * wishes to read the remainder of the query results or continue submitting
 * data.
 *
 * This command is idempotent.
 *
 * @generated from message arrow.flight.protocol.sql.ActionCancelQueryRequest
 */
export class ActionCancelQueryRequest extends Message<ActionCancelQueryRequest> {
  /**
   * The result of the GetFlightInfo RPC that initiated the query.
   * XXX(ARROW-16902): this must be a serialized FlightInfo, but is
   * rendered as bytes because Protobuf does not really support one
   * DLL using Protobuf definitions from another DLL.
   *
   * @generated from field: bytes info = 1;
   */
  info = new Uint8Array(0);

  constructor(data?: PartialMessage<ActionCancelQueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.ActionCancelQueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionCancelQueryRequest {
    return new ActionCancelQueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionCancelQueryRequest {
    return new ActionCancelQueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionCancelQueryRequest {
    return new ActionCancelQueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActionCancelQueryRequest | PlainMessage<ActionCancelQueryRequest> | undefined, b: ActionCancelQueryRequest | PlainMessage<ActionCancelQueryRequest> | undefined): boolean {
    return proto3.util.equals(ActionCancelQueryRequest, a, b);
  }
}

/**
 *
 * The result of cancelling a query.
 *
 * The result should be wrapped in a google.protobuf.Any message.
 *
 * @generated from message arrow.flight.protocol.sql.ActionCancelQueryResult
 */
export class ActionCancelQueryResult extends Message<ActionCancelQueryResult> {
  /**
   * @generated from field: arrow.flight.protocol.sql.ActionCancelQueryResult.CancelResult result = 1;
   */
  result = ActionCancelQueryResult_CancelResult.UNSPECIFIED;

  constructor(data?: PartialMessage<ActionCancelQueryResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "arrow.flight.protocol.sql.ActionCancelQueryResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ActionCancelQueryResult_CancelResult) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionCancelQueryResult {
    return new ActionCancelQueryResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionCancelQueryResult {
    return new ActionCancelQueryResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionCancelQueryResult {
    return new ActionCancelQueryResult().fromJsonString(jsonString, options);
  }

  static equals(a: ActionCancelQueryResult | PlainMessage<ActionCancelQueryResult> | undefined, b: ActionCancelQueryResult | PlainMessage<ActionCancelQueryResult> | undefined): boolean {
    return proto3.util.equals(ActionCancelQueryResult, a, b);
  }
}

/**
 * @generated from enum arrow.flight.protocol.sql.ActionCancelQueryResult.CancelResult
 */
export enum ActionCancelQueryResult_CancelResult {
  /**
   * The cancellation status is unknown. Servers should avoid using
   * this value (send a NOT_FOUND error if the requested query is
   * not known). Clients can retry the request.
   *
   * @generated from enum value: CANCEL_RESULT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The cancellation request is complete. Subsequent requests with
   * the same payload may return CANCELLED or a NOT_FOUND error.
   *
   * @generated from enum value: CANCEL_RESULT_CANCELLED = 1;
   */
  CANCELLED = 1,

  /**
   * The cancellation request is in progress. The client may retry
   * the cancellation request.
   *
   * @generated from enum value: CANCEL_RESULT_CANCELLING = 2;
   */
  CANCELLING = 2,

  /**
   * The query is not cancellable. The client should not retry the
   * cancellation request.
   *
   * @generated from enum value: CANCEL_RESULT_NOT_CANCELLABLE = 3;
   */
  NOT_CANCELLABLE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ActionCancelQueryResult_CancelResult)
proto3.util.setEnumType(ActionCancelQueryResult_CancelResult, "arrow.flight.protocol.sql.ActionCancelQueryResult.CancelResult", [
  { no: 0, name: "CANCEL_RESULT_UNSPECIFIED" },
  { no: 1, name: "CANCEL_RESULT_CANCELLED" },
  { no: 2, name: "CANCEL_RESULT_CANCELLING" },
  { no: 3, name: "CANCEL_RESULT_NOT_CANCELLABLE" },
]);

